
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import java.awt.Color;
import browser.frontend.objects.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym1.class;
}

  /** Default constructor. */
  @Deprecated
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\004\000\002\003\005\000\002\003\004" +
    "\000\002\013\005\000\002\004\003\000\002\004\003\000" +
    "\002\005\004\000\002\005\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\052\007\000\002\052\006\000\002" +
    "\053\005\000\002\053\004\000\002\053\004\000\002\053" +
    "\004\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\034\005\000\002\036\005\000\002\035\005\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\040\003\000\002\041\004\000\002\041" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\047\005" +
    "\000\002\047\005\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\005\000\002\047\005\000\002" +
    "\050\003\000\002\057\005\000\002\062\005\000\002\062" +
    "\004\000\002\060\004\000\002\060\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\030\005\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\064\005\000" +
    "\002\063\003\000\002\063\003\000\002\011\005\000\002" +
    "\051\005\000\002\056\011\000\002\056\011\000\002\044" +
    "\005\000\002\045\007\000\002\045\006\000\002\046\007" +
    "\000\002\046\006\000\002\032\005\000\002\031\003\000" +
    "\002\031\003\000\002\055\004\000\002\055\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\014\005\000\002\037\005\000\002\015\007" +
    "\000\002\015\006\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\005\000\002\022\004\000\002\022\003\000\002\023\004" +
    "\000\002\024\007\000\002\024\006\000\002\025\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\016\005\001\002\000\004\002\u0100\001" +
    "\002\000\010\017\011\020\010\024\012\001\002\000\004" +
    "\017\377\001\002\000\004\024\012\001\002\000\006\021" +
    "\370\022\367\001\002\000\004\002\ufffe\001\002\000\012" +
    "\031\021\032\016\033\013\103\020\001\002\000\004\004" +
    "\365\001\002\000\004\103\362\001\002\000\010\032\016" +
    "\033\013\103\uffd7\001\002\000\004\004\355\001\002\000" +
    "\004\103\uffd5\001\002\000\154\004\070\005\106\006\146" +
    "\007\054\010\053\011\154\012\124\013\103\014\117\015" +
    "\060\026\114\030\074\031\136\032\073\034\127\036\111" +
    "\037\047\040\055\041\072\042\145\043\063\045\134\047" +
    "\101\051\150\053\113\055\104\057\152\060\115\061\126" +
    "\063\112\066\052\067\142\070\066\072\051\074\153\075" +
    "\155\077\125\101\061\102\140\104\147\105\056\106\062" +
    "\107\130\110\123\111\050\112\116\113\075\114\135\115" +
    "\067\116\122\117\071\120\100\122\156\001\002\000\004" +
    "\004\024\001\002\000\006\033\013\103\uffd6\001\002\000" +
    "\004\103\uffd8\001\002\000\044\111\043\124\031\125\032" +
    "\126\030\127\034\130\033\131\036\132\045\133\027\134" +
    "\035\135\041\136\025\137\044\140\046\141\037\142\042" +
    "\143\026\001\002\000\020\032\uffc6\033\uffc6\036\uffc6\057" +
    "\uffc6\060\uffc6\103\uffc6\144\uffc6\001\002\000\020\032\uffc1" +
    "\033\uffc1\036\uffc1\057\uffc1\060\uffc1\103\uffc1\144\uffc1\001" +
    "\002\000\020\032\uffc9\033\uffc9\036\uffc9\057\uffc9\060\uffc9" +
    "\103\uffc9\144\uffc9\001\002\000\020\032\uffce\033\uffce\036" +
    "\uffce\057\uffce\060\uffce\103\uffce\144\uffce\001\002\000\020" +
    "\032\uffd0\033\uffd0\036\uffd0\057\uffd0\060\uffd0\103\uffd0\144" +
    "\uffd0\001\002\000\020\032\uffcf\033\uffcf\036\uffcf\057\uffcf" +
    "\060\uffcf\103\uffcf\144\uffcf\001\002\000\020\032\uffcc\033" +
    "\uffcc\036\uffcc\057\uffcc\060\uffcc\103\uffcc\144\uffcc\001\002" +
    "\000\020\032\uffcd\033\uffcd\036\uffcd\057\uffcd\060\uffcd\103" +
    "\uffcd\144\uffcd\001\002\000\020\032\uffc8\033\uffc8\036\uffc8" +
    "\057\uffc8\060\uffc8\103\uffc8\144\uffc8\001\002\000\020\032" +
    "\uffcb\033\uffcb\036\uffcb\057\uffcb\060\uffcb\103\uffcb\144\uffcb" +
    "\001\002\000\020\032\uffc3\033\uffc3\036\uffc3\057\uffc3\060" +
    "\uffc3\103\uffc3\144\uffc3\001\002\000\010\032\uffd4\033\uffd4" +
    "\103\uffd4\001\002\000\020\032\uffc7\033\uffc7\036\uffc7\057" +
    "\uffc7\060\uffc7\103\uffc7\144\uffc7\001\002\000\020\032\uffc2" +
    "\033\uffc2\036\uffc2\057\uffc2\060\uffc2\103\uffc2\144\uffc2\001" +
    "\002\000\020\032\uffd1\033\uffd1\036\uffd1\057\uffd1\060\uffd1" +
    "\103\uffd1\144\uffd1\001\002\000\020\032\uffc5\033\uffc5\036" +
    "\uffc5\057\uffc5\060\uffc5\103\uffc5\144\uffc5\001\002\000\020" +
    "\032\uffca\033\uffca\036\uffca\057\uffca\060\uffca\103\uffca\144" +
    "\uffca\001\002\000\020\032\uffc4\033\uffc4\036\uffc4\057\uffc4" +
    "\060\uffc4\103\uffc4\144\uffc4\001\002\000\220\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\023\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\100\ufff2\101" +
    "\ufff2\102\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2" +
    "\111\ufff2\112\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2\117" +
    "\ufff2\120\ufff2\121\ufff2\122\ufff2\123\ufff2\001\002\000\220" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\023\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\074\ufff4\075\ufff4\076\ufff4\077\ufff4" +
    "\100\ufff4\101\ufff4\102\ufff4\104\ufff4\105\ufff4\106\ufff4\107" +
    "\ufff4\110\ufff4\111\ufff4\112\ufff4\113\ufff4\114\ufff4\115\ufff4" +
    "\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\001" +
    "\002\000\012\036\301\057\306\073\342\103\341\001\002" +
    "\000\220\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\023\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\102\uffea\104\uffea\105\uffea\106" +
    "\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113\uffea\114\uffea" +
    "\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122\uffea\123" +
    "\uffea\001\002\000\172\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\025" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\045\uff97\047\uff97\051\uff97\053\uff97\055\uff97\056\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\072\uff97\074\uff97\075\uff97" +
    "\077\uff97\101\uff97\102\uff97\104\uff97\105\uff97\106\uff97\107" +
    "\uff97\110\uff97\111\uff97\112\uff97\113\uff97\114\uff97\115\uff97" +
    "\116\uff97\117\uff97\120\uff97\122\uff97\001\002\000\172\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\045\uff98\047\uff98\051" +
    "\uff98\053\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98" +
    "\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070" +
    "\uff98\072\uff98\074\uff98\075\uff98\077\uff98\101\uff98\102\uff98" +
    "\104\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\112" +
    "\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98\120\uff98" +
    "\122\uff98\001\002\000\220\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1" +
    "\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1\102\ufff1\104" +
    "\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1\112\ufff1" +
    "\113\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121" +
    "\ufff1\122\ufff1\123\ufff1\001\002\000\220\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\023\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4" +
    "\102\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111" +
    "\uffe4\112\uffe4\113\uffe4\114\uffe4\115\uffe4\116\uffe4\117\uffe4" +
    "\120\uffe4\121\uffe4\122\uffe4\123\uffe4\001\002\000\172\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4\047\uffb4\051" +
    "\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\072\uffb4\074\uffb4\075\uffb4\077\uffb4\101\uffb4\102\uffb4" +
    "\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4\112" +
    "\uffb4\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\122\uffb4\001\002\000\172\004\uff92\005\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\045\uff92\047\uff92\051\uff92\053\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\072\uff92\074\uff92\075" +
    "\uff92\077\uff92\101\uff92\102\uff92\104\uff92\105\uff92\106\uff92" +
    "\107\uff92\110\uff92\111\uff92\112\uff92\113\uff92\114\uff92\115" +
    "\uff92\116\uff92\117\uff92\120\uff92\122\uff92\001\002\000\220" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\072\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8" +
    "\100\uffe8\101\uffe8\102\uffe8\104\uffe8\105\uffe8\106\uffe8\107" +
    "\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\114\uffe8\115\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\001" +
    "\002\000\220\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\075\uffe5\076" +
    "\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\104\uffe5\105\uffe5" +
    "\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\113\uffe5\114" +
    "\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5" +
    "\123\uffe5\001\002\000\066\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\057\152\060\115" +
    "\066\052\067\142\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\001\002\000\172\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\045\uffb0\047\uffb0\051\uffb0\053" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070\uffb0\072" +
    "\uffb0\074\uffb0\075\uffb0\077\uffb0\101\uffb0\102\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0\113" +
    "\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\122\uffb0" +
    "\001\002\000\172\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\045\uffb9\047\uffb9\051\uffb9\053\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\072\uffb9\074\uffb9\075\uffb9\077" +
    "\uffb9\101\uffb9\102\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9" +
    "\110\uffb9\111\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116" +
    "\uffb9\117\uffb9\120\uffb9\122\uffb9\001\002\000\066\004\070" +
    "\031\136\032\073\036\111\037\047\040\055\041\072\042" +
    "\145\057\152\060\115\066\052\067\142\101\061\102\140" +
    "\104\147\105\056\106\062\107\130\110\123\111\050\112" +
    "\116\113\075\114\135\115\067\116\122\117\071\001\002" +
    "\000\220\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\023\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\071\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\100\uffdf\101\uffdf\102\uffdf\104\uffdf\105\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\113\uffdf\114\uffdf" +
    "\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123" +
    "\uffdf\001\002\000\220\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\023" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\074\uffde\075" +
    "\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde\104\uffde" +
    "\105\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112\uffde\113" +
    "\uffde\114\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde" +
    "\122\uffde\123\uffde\001\002\000\220\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\101\uffee\102" +
    "\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee\111\uffee" +
    "\112\uffee\113\uffee\114\uffee\115\uffee\116\uffee\117\uffee\120" +
    "\uffee\121\uffee\122\uffee\123\uffee\001\002\000\220\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\023\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef" +
    "\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef" +
    "\101\uffef\102\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\111\uffef\112\uffef\113\uffef\114\uffef\115\uffef\116\uffef" +
    "\117\uffef\120\uffef\121\uffef\122\uffef\123\uffef\001\002\000" +
    "\220\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\023\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\100\ufff5\101\ufff5\102\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\113\ufff5\114\ufff5\115" +
    "\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\123\ufff5" +
    "\001\002\000\172\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\045\uffa7\047\uffa7\051\uffa7\053\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\072\uffa7\074\uffa7\075\uffa7\077" +
    "\uffa7\101\uffa7\102\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7" +
    "\110\uffa7\111\uffa7\112\uffa7\113\uffa7\114\uffa7\115\uffa7\116" +
    "\uffa7\117\uffa7\120\uffa7\122\uffa7\001\002\000\220\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110" +
    "\uffe0\111\uffe0\112\uffe0\113\uffe0\114\uffe0\115\uffe0\116\uffe0" +
    "\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\001\002\000" +
    "\172\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\045\uffb2\047" +
    "\uffb2\051\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\072\uffb2\074\uffb2\075\uffb2\077\uffb2\101\uffb2" +
    "\102\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\122\uffb2\001\002\000\172\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\043\uffba\045\uffba\047\uffba\051\uffba\053\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\072\uffba\074" +
    "\uffba\075\uffba\077\uffba\101\uffba\102\uffba\104\uffba\105\uffba" +
    "\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114" +
    "\uffba\115\uffba\116\uffba\117\uffba\120\uffba\122\uffba\001\002" +
    "\000\066\004\070\031\136\032\073\036\111\037\047\040" +
    "\055\041\072\042\145\057\152\060\115\066\052\067\142" +
    "\101\061\102\140\104\147\105\056\106\062\107\130\110" +
    "\123\111\050\112\116\113\075\114\135\115\067\116\122" +
    "\117\071\001\002\000\066\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\057\152\060\115" +
    "\066\052\067\142\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\001\002\000\004\025\327\001" +
    "\002\000\172\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\034\uff94\035\uff94" +
    "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\045" +
    "\uff94\047\uff94\051\uff94\053\uff94\055\uff94\056\uff94\057\uff94" +
    "\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066" +
    "\uff94\067\uff94\070\uff94\072\uff94\074\uff94\075\uff94\077\uff94" +
    "\101\uff94\102\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110" +
    "\uff94\111\uff94\112\uff94\113\uff94\114\uff94\115\uff94\116\uff94" +
    "\117\uff94\120\uff94\122\uff94\001\002\000\014\036\301\057" +
    "\306\060\303\103\302\144\276\001\002\000\172\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\047\uffbb\051\uffbb" +
    "\053\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb" +
    "\072\uffbb\074\uffbb\075\uffbb\077\uffbb\101\uffbb\102\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120\uffbb\122" +
    "\uffbb\001\002\000\172\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\045\uff9a\047\uff9a\051\uff9a\053\uff9a\055\uff9a\056\uff9a" +
    "\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\072\uff9a\074\uff9a\075\uff9a" +
    "\077\uff9a\101\uff9a\102\uff9a\104\uff9a\105\uff9a\106\uff9a\107" +
    "\uff9a\110\uff9a\111\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a" +
    "\116\uff9a\117\uff9a\120\uff9a\122\uff9a\001\002\000\172\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\045\uffb1\047\uffb1\051" +
    "\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\072\uffb1\074\uffb1\075\uffb1\077\uffb1\101\uffb1\102\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1" +
    "\122\uffb1\001\002\000\172\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\045\uffbe\047\uffbe\051\uffbe\053\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\072\uffbe\074\uffbe\075" +
    "\uffbe\077\uffbe\101\uffbe\102\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\111\uffbe\112\uffbe\113\uffbe\114\uffbe\115" +
    "\uffbe\116\uffbe\117\uffbe\120\uffbe\122\uffbe\001\002\000\220" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070" +
    "\ufff3\071\ufff3\072\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3" +
    "\100\ufff3\101\ufff3\102\ufff3\104\ufff3\105\ufff3\106\ufff3\107" +
    "\ufff3\110\ufff3\111\ufff3\112\ufff3\113\ufff3\114\ufff3\115\ufff3" +
    "\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\001" +
    "\002\000\010\066\256\067\257\103\254\001\002\000\066" +
    "\004\070\031\136\032\073\036\111\037\047\040\055\041" +
    "\072\042\145\057\152\060\115\066\052\067\142\101\061" +
    "\102\140\104\147\105\056\106\062\107\130\110\123\111" +
    "\050\112\116\113\075\114\135\115\067\116\122\117\071" +
    "\001\002\000\006\036\233\103\231\001\002\000\220\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\023\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\072\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb" +
    "\110\uffeb\111\uffeb\112\uffeb\113\uffeb\114\uffeb\115\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\123\uffeb\001\002" +
    "\000\220\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\070\uffe1\071\uffe1\072\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\077\uffe1\100\uffe1\101\uffe1\102\uffe1\104\uffe1\105\uffe1\106" +
    "\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\113\uffe1\114\uffe1" +
    "\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123" +
    "\uffe1\001\002\000\172\004\uff93\005\uff93\006\uff93\007\uff93" +
    "\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\045\uff93\047\uff93\051\uff93\053\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\072\uff93\074\uff93\075\uff93" +
    "\077\uff93\101\uff93\102\uff93\104\uff93\105\uff93\106\uff93\107" +
    "\uff93\110\uff93\111\uff93\112\uff93\113\uff93\114\uff93\115\uff93" +
    "\116\uff93\117\uff93\120\uff93\122\uff93\001\002\000\172\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\047\uffb3\051" +
    "\uffb3\053\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\072\uffb3\074\uffb3\075\uffb3\077\uffb3\101\uffb3\102\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112" +
    "\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3\117\uffb3\120\uffb3" +
    "\122\uffb3\001\002\000\172\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\045\uffbc\047\uffbc\051\uffbc\053\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\070\uffbc\072\uffbc\074\uffbc\075" +
    "\uffbc\077\uffbc\101\uffbc\102\uffbc\104\uffbc\105\uffbc\106\uffbc" +
    "\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc\001\002\000\220" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\023\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053" +
    "\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\071\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\100\ufffa\101\ufffa\102\ufffa\104\ufffa\105\ufffa\106\ufffa\107" +
    "\ufffa\110\ufffa\111\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa" +
    "\116\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa\001" +
    "\002\000\220\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\023\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\104\uffe2\105\uffe2" +
    "\106\uffe2\107\uffe2\110\uffe2\111\uffe2\112\uffe2\113\uffe2\114" +
    "\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121\uffe2\122\uffe2" +
    "\123\uffe2\001\002\000\172\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95" +
    "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\034" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\045\uff95\047\uff95\051\uff95\053\uff95\055\uff95\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\072\uff95\074\uff95\075" +
    "\uff95\077\uff95\101\uff95\102\uff95\104\uff95\105\uff95\106\uff95" +
    "\107\uff95\110\uff95\111\uff95\112\uff95\113\uff95\114\uff95\115" +
    "\uff95\116\uff95\117\uff95\120\uff95\122\uff95\001\002\000\006" +
    "\101\216\102\215\001\002\000\006\066\176\103\175\001" +
    "\002\000\154\004\070\005\106\006\146\007\054\010\053" +
    "\011\154\012\124\013\103\014\117\015\060\026\114\030" +
    "\074\031\136\032\073\034\127\036\111\037\047\040\055" +
    "\041\072\042\145\043\063\045\134\047\101\051\150\053" +
    "\113\055\104\057\152\060\115\061\126\063\112\066\052" +
    "\067\142\070\066\072\051\074\153\075\155\077\125\101" +
    "\061\102\140\104\147\105\056\106\062\107\130\110\123" +
    "\111\050\112\116\113\075\114\135\115\067\116\122\117" +
    "\071\120\100\122\156\001\002\000\220\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111" +
    "\uffe3\112\uffe3\113\uffe3\114\uffe3\115\uffe3\116\uffe3\117\uffe3" +
    "\120\uffe3\121\uffe3\122\uffe3\123\uffe3\001\002\000\172\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\025\uffaf\026\uffaf\027\uffaf\030" +
    "\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\045\uffaf\047\uffaf\051" +
    "\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\072\uffaf\074\uffaf\075\uffaf\077\uffaf\101\uffaf\102\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112" +
    "\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf" +
    "\122\uffaf\001\002\000\156\004\070\005\106\006\146\007" +
    "\054\010\053\011\154\012\124\013\103\014\117\015\060" +
    "\025\uffc0\026\114\030\074\031\136\032\073\034\127\036" +
    "\111\037\047\040\055\041\072\042\145\043\063\045\134" +
    "\047\101\051\150\053\113\055\104\057\152\060\115\061" +
    "\126\063\112\066\052\067\142\070\066\072\051\074\153" +
    "\075\155\077\125\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\120\100\122\156\001\002\000" +
    "\172\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\047" +
    "\uffb7\051\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\072\uffb7\074\uffb7\075\uffb7\077\uffb7\101\uffb7" +
    "\102\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111" +
    "\uffb7\112\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\122\uffb7\001\002\000\066\004\070\031\136\032" +
    "\073\036\111\037\047\040\055\041\072\042\145\057\152" +
    "\060\115\066\052\067\142\101\061\102\140\104\147\105" +
    "\056\106\062\107\130\110\123\111\050\112\116\113\075" +
    "\114\135\115\067\116\122\117\071\001\002\000\220\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\023\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\072\uffed\074\uffed\075\uffed\076\uffed\077\uffed\100" +
    "\uffed\101\uffed\102\uffed\104\uffed\105\uffed\106\uffed\107\uffed" +
    "\110\uffed\111\uffed\112\uffed\113\uffed\114\uffed\115\uffed\116" +
    "\uffed\117\uffed\120\uffed\121\uffed\122\uffed\123\uffed\001\002" +
    "\000\220\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\023\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\072\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\077\ufff6\100\ufff6\101\ufff6\102\ufff6\104\ufff6\105\ufff6\106" +
    "\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\113\ufff6\114\ufff6" +
    "\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\122\ufff6\123" +
    "\ufff6\001\002\000\172\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\045\uffb5\047\uffb5\051\uffb5\053\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065" +
    "\uffb5\066\uffb5\067\uffb5\070\uffb5\072\uffb5\074\uffb5\075\uffb5" +
    "\077\uffb5\101\uffb5\102\uffb5\104\uffb5\105\uffb5\106\uffb5\107" +
    "\uffb5\110\uffb5\111\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5" +
    "\116\uffb5\117\uffb5\120\uffb5\122\uffb5\001\002\000\220\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\023\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7" +
    "\110\uffe7\111\uffe7\112\uffe7\113\uffe7\114\uffe7\115\uffe7\116" +
    "\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7\001\002" +
    "\000\172\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\045\uffbd" +
    "\047\uffbd\051\uffbd\053\uffbd\055\uffbd\056\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\067\uffbd\070\uffbd\072\uffbd\074\uffbd\075\uffbd\077\uffbd\101" +
    "\uffbd\102\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd" +
    "\111\uffbd\112\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\117" +
    "\uffbd\120\uffbd\122\uffbd\001\002\000\220\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\101\uffe9" +
    "\102\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111" +
    "\uffe9\112\uffe9\113\uffe9\114\uffe9\115\uffe9\116\uffe9\117\uffe9" +
    "\120\uffe9\121\uffe9\122\uffe9\123\uffe9\001\002\000\172\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\047\uffb8\051" +
    "\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8" +
    "\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070" +
    "\uffb8\072\uffb8\074\uffb8\075\uffb8\077\uffb8\101\uffb8\102\uffb8" +
    "\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\113\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8" +
    "\122\uffb8\001\002\000\220\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\023\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\100\ufff9\101\ufff9\102\ufff9\104" +
    "\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\112\ufff9" +
    "\113\ufff9\114\ufff9\115\ufff9\116\ufff9\117\ufff9\120\ufff9\121" +
    "\ufff9\122\ufff9\123\ufff9\001\002\000\220\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\101\ufff0" +
    "\102\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111" +
    "\ufff0\112\ufff0\113\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0" +
    "\120\ufff0\121\ufff0\122\ufff0\123\ufff0\001\002\000\172\004" +
    "\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\045\uff99\047\uff99\051" +
    "\uff99\053\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070" +
    "\uff99\072\uff99\074\uff99\075\uff99\077\uff99\101\uff99\102\uff99" +
    "\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\111\uff99\112" +
    "\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\120\uff99" +
    "\122\uff99\001\002\000\220\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\023\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\074\uffe6" +
    "\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\104" +
    "\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\113\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6\120\uffe6\121" +
    "\uffe6\122\uffe6\123\uffe6\001\002\000\066\004\070\031\136" +
    "\032\073\036\111\037\047\040\055\041\072\042\145\057" +
    "\152\060\115\066\052\067\142\101\061\102\140\104\147" +
    "\105\056\106\062\107\130\110\123\111\050\112\116\113" +
    "\075\114\135\115\067\116\122\117\071\001\002\000\172" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6\047\uffb6" +
    "\051\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\072\uffb6\074\uffb6\075\uffb6\077\uffb6\101\uffb6\102" +
    "\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6" +
    "\112\uffb6\113\uffb6\114\uffb6\115\uffb6\116\uffb6\117\uffb6\120" +
    "\uffb6\122\uffb6\001\002\000\220\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\023\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\100\uffec\101\uffec\102\uffec" +
    "\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec\112" +
    "\uffec\113\uffec\114\uffec\115\uffec\116\uffec\117\uffec\120\uffec" +
    "\121\uffec\122\uffec\123\uffec\001\002\000\172\004\uff66\005" +
    "\uff66\006\uff66\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66" +
    "\014\uff66\015\uff66\025\uff66\026\uff66\027\uff66\030\uff66\031" +
    "\uff66\032\uff66\034\uff66\035\uff66\036\uff66\037\uff66\040\uff66" +
    "\041\uff66\042\uff66\043\uff66\045\uff66\047\uff66\051\uff66\053" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\072" +
    "\uff66\074\uff66\075\uff66\077\uff66\101\uff66\102\uff66\104\uff66" +
    "\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66\112\uff66\113" +
    "\uff66\114\uff66\115\uff66\116\uff66\117\uff66\120\uff66\122\uff66" +
    "\001\002\000\172\004\uff96\005\uff96\006\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\045\uff96\047\uff96\051\uff96\053\uff96\055\uff96\056\uff96\057" +
    "\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96" +
    "\066\uff96\067\uff96\070\uff96\072\uff96\074\uff96\075\uff96\077" +
    "\uff96\101\uff96\102\uff96\104\uff96\105\uff96\106\uff96\107\uff96" +
    "\110\uff96\111\uff96\112\uff96\113\uff96\114\uff96\115\uff96\116" +
    "\uff96\117\uff96\120\uff96\122\uff96\001\002\000\066\004\070" +
    "\031\136\032\073\036\111\037\047\040\055\041\072\042" +
    "\145\057\152\060\115\066\052\067\142\101\061\102\140" +
    "\104\147\105\056\106\062\107\130\110\123\111\050\112" +
    "\116\113\075\114\135\115\067\116\122\117\071\001\002" +
    "\000\066\004\070\031\136\032\073\036\111\037\047\040" +
    "\055\041\072\042\145\057\152\060\115\066\052\067\142" +
    "\101\061\102\140\104\147\105\056\106\062\107\130\110" +
    "\123\111\050\112\116\113\075\114\135\115\067\116\122" +
    "\117\071\001\002\000\114\004\ufff7\023\ufff7\031\ufff7\032" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\044\ufff7" +
    "\046\ufff7\050\ufff7\052\ufff7\054\ufff7\057\ufff7\060\ufff7\066" +
    "\ufff7\067\ufff7\071\ufff7\076\ufff7\100\ufff7\101\ufff7\102\ufff7" +
    "\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112" +
    "\ufff7\113\ufff7\114\ufff7\115\ufff7\116\ufff7\117\ufff7\121\ufff7" +
    "\123\ufff7\001\002\000\070\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\057\152\060\115" +
    "\066\052\067\142\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\123\162\001\002\000\114\004" +
    "\ufff8\023\ufff8\031\ufff8\032\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\044\ufff8\046\ufff8\050\ufff8\052\ufff8\054" +
    "\ufff8\057\ufff8\060\ufff8\066\ufff8\067\ufff8\071\ufff8\076\ufff8" +
    "\100\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8\106\ufff8\107" +
    "\ufff8\110\ufff8\111\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8" +
    "\116\ufff8\117\ufff8\121\ufff8\123\ufff8\001\002\000\172\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\045\uffaa\047\uffaa\051" +
    "\uffaa\053\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\072\uffaa\074\uffaa\075\uffaa\077\uffaa\101\uffaa\102\uffaa" +
    "\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112" +
    "\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa" +
    "\122\uffaa\001\002\000\070\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\057\152\060\115" +
    "\066\052\067\142\076\164\101\061\102\140\104\147\105" +
    "\056\106\062\107\130\110\123\111\050\112\116\113\075" +
    "\114\135\115\067\116\122\117\071\001\002\000\172\004" +
    "\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\013\uff8d\014\uff8d\015\uff8d\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\041\uff8d\042\uff8d\043\uff8d\045\uff8d\047\uff8d\051" +
    "\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070" +
    "\uff8d\072\uff8d\074\uff8d\075\uff8d\077\uff8d\101\uff8d\102\uff8d" +
    "\104\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d\111\uff8d\112" +
    "\uff8d\113\uff8d\114\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d" +
    "\122\uff8d\001\002\000\070\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\052\166\057\152" +
    "\060\115\066\052\067\142\101\061\102\140\104\147\105" +
    "\056\106\062\107\130\110\123\111\050\112\116\113\075" +
    "\114\135\115\067\116\122\117\071\001\002\000\172\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\015\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\045\uffab\047\uffab\051" +
    "\uffab\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\072\uffab\074\uffab\075\uffab\077\uffab\101\uffab\102\uffab" +
    "\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112" +
    "\uffab\113\uffab\114\uffab\115\uffab\116\uffab\117\uffab\120\uffab" +
    "\122\uffab\001\002\000\070\004\070\031\136\032\073\036" +
    "\111\037\047\040\055\041\072\042\145\046\170\057\152" +
    "\060\115\066\052\067\142\101\061\102\140\104\147\105" +
    "\056\106\062\107\130\110\123\111\050\112\116\113\075" +
    "\114\135\115\067\116\122\117\071\001\002\000\172\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\045\uffad\047\uffad\051" +
    "\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\072\uffad\074\uffad\075\uffad\077\uffad\101\uffad\102\uffad" +
    "\104\uffad\105\uffad\106\uffad\107\uffad\110\uffad\111\uffad\112" +
    "\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad\120\uffad" +
    "\122\uffad\001\002\000\172\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\045\uffbf\047\uffbf\051\uffbf\053\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf" +
    "\065\uffbf\066\uffbf\067\uffbf\070\uffbf\072\uffbf\074\uffbf\075" +
    "\uffbf\077\uffbf\101\uffbf\102\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\107\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\114\uffbf\115" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\122\uffbf\001\002\000\156" +
    "\004\070\005\106\006\146\007\054\010\053\011\154\012" +
    "\124\013\103\014\117\015\060\026\114\030\074\031\136" +
    "\032\073\034\127\035\173\036\111\037\047\040\055\041" +
    "\072\042\145\043\063\045\134\047\101\051\150\053\113" +
    "\055\104\057\152\060\115\061\126\063\112\066\052\067" +
    "\142\070\066\072\051\074\153\075\155\077\125\101\061" +
    "\102\140\104\147\105\056\106\062\107\130\110\123\111" +
    "\050\112\116\113\075\114\135\115\067\116\122\117\071" +
    "\120\100\122\156\001\002\000\172\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032" +
    "\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\045\uff8a\047\uff8a\051\uff8a\053\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\072\uff8a\074" +
    "\uff8a\075\uff8a\077\uff8a\101\uff8a\102\uff8a\104\uff8a\105\uff8a" +
    "\106\uff8a\107\uff8a\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\122\uff8a\001\002" +
    "\000\004\103\212\001\002\000\004\065\204\001\002\000" +
    "\004\004\177\001\002\000\010\105\201\106\202\107\203" +
    "\001\002\000\004\103\uff6a\001\002\000\004\103\uff69\001" +
    "\002\000\004\103\uff68\001\002\000\004\103\uff67\001\002" +
    "\000\154\004\070\005\106\006\146\007\054\010\053\011" +
    "\154\012\124\013\103\014\117\015\060\026\114\030\074" +
    "\031\136\032\073\034\127\036\111\037\047\040\055\041" +
    "\072\042\145\043\063\045\134\047\101\051\150\053\113" +
    "\055\104\057\152\060\115\061\126\063\112\066\052\067" +
    "\142\070\066\072\051\074\153\075\155\077\125\101\061" +
    "\102\140\104\147\105\056\106\062\107\130\110\123\111" +
    "\050\112\116\113\075\114\135\115\067\116\122\117\071" +
    "\120\100\122\156\001\002\000\006\062\207\065\204\001" +
    "\002\000\010\062\uff6e\064\uff6e\065\uff6e\001\002\000\172" +
    "\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012" +
    "\uff6b\013\uff6b\014\uff6b\015\uff6b\025\uff6b\026\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\032\uff6b\034\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\045\uff6b\047\uff6b" +
    "\051\uff6b\053\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061" +
    "\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b" +
    "\070\uff6b\072\uff6b\074\uff6b\075\uff6b\077\uff6b\101\uff6b\102" +
    "\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\112\uff6b\113\uff6b\114\uff6b\115\uff6b\116\uff6b\117\uff6b\120" +
    "\uff6b\122\uff6b\001\002\000\010\062\uff6f\064\uff6f\065\uff6f" +
    "\001\002\000\162\004\070\005\106\006\146\007\054\010" +
    "\053\011\154\012\124\013\103\014\117\015\060\026\114" +
    "\030\074\031\136\032\073\034\127\036\111\037\047\040" +
    "\055\041\072\042\145\043\063\045\134\047\101\051\150" +
    "\053\113\055\104\057\152\060\115\061\126\062\uff6d\063" +
    "\112\064\uff6d\065\uff6d\066\052\067\142\070\066\072\051" +
    "\074\153\075\155\077\125\101\061\102\140\104\147\105" +
    "\056\106\062\107\130\110\123\111\050\112\116\113\075" +
    "\114\135\115\067\116\122\117\071\120\100\122\156\001" +
    "\002\000\004\065\204\001\002\000\006\062\214\065\204" +
    "\001\002\000\172\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010" +
    "\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\025\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\034\uff6c\035" +
    "\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c" +
    "\045\uff6c\047\uff6c\051\uff6c\053\uff6c\055\uff6c\056\uff6c\057" +
    "\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c" +
    "\066\uff6c\067\uff6c\070\uff6c\072\uff6c\074\uff6c\075\uff6c\077" +
    "\uff6c\101\uff6c\102\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c" +
    "\110\uff6c\111\uff6c\112\uff6c\113\uff6c\114\uff6c\115\uff6c\116" +
    "\uff6c\117\uff6c\120\uff6c\122\uff6c\001\002\000\004\004\224" +
    "\001\002\000\004\004\217\001\002\000\004\117\220\001" +
    "\002\000\004\103\221\001\002\000\066\004\070\031\136" +
    "\032\073\036\111\037\047\040\055\041\072\042\145\057" +
    "\152\060\115\066\052\067\142\101\061\102\140\104\147" +
    "\105\056\106\062\107\130\110\123\111\050\112\116\113" +
    "\075\114\135\115\067\116\122\117\071\001\002\000\070" +
    "\004\070\031\136\032\073\036\111\037\047\040\055\041" +
    "\072\042\145\057\152\060\115\066\052\067\142\100\223" +
    "\101\061\102\140\104\147\105\056\106\062\107\130\110" +
    "\123\111\050\112\116\113\075\114\135\115\067\116\122" +
    "\117\071\001\002\000\172\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\034" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\045\uff8c\047\uff8c\051\uff8c\053\uff8c\055\uff8c\056" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\072\uff8c\074\uff8c\075" +
    "\uff8c\077\uff8c\101\uff8c\102\uff8c\104\uff8c\105\uff8c\106\uff8c" +
    "\107\uff8c\110\uff8c\111\uff8c\112\uff8c\113\uff8c\114\uff8c\115" +
    "\uff8c\116\uff8c\117\uff8c\120\uff8c\122\uff8c\001\002\000\004" +
    "\104\225\001\002\000\004\103\226\001\002\000\066\004" +
    "\070\031\136\032\073\036\111\037\047\040\055\041\072" +
    "\042\145\057\152\060\115\066\052\067\142\101\061\102" +
    "\140\104\147\105\056\106\062\107\130\110\123\111\050" +
    "\112\116\113\075\114\135\115\067\116\122\117\071\001" +
    "\002\000\070\004\070\031\136\032\073\036\111\037\047" +
    "\040\055\041\072\042\145\057\152\060\115\066\052\067" +
    "\142\100\230\101\061\102\140\104\147\105\056\106\062" +
    "\107\130\110\123\111\050\112\116\113\075\114\135\115" +
    "\067\116\122\117\071\001\002\000\172\004\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\045\uff8b\047\uff8b\051\uff8b\053\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\072\uff8b" +
    "\074\uff8b\075\uff8b\077\uff8b\101\uff8b\102\uff8b\104\uff8b\105" +
    "\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\112\uff8b\113\uff8b" +
    "\114\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\122\uff8b\001" +
    "\002\000\154\004\070\005\106\006\146\007\054\010\053" +
    "\011\154\012\124\013\103\014\117\015\060\026\114\030" +
    "\074\031\136\032\073\034\127\036\111\037\047\040\055" +
    "\041\072\042\145\043\063\045\134\047\101\051\150\053" +
    "\113\055\104\057\152\060\115\061\126\063\112\066\052" +
    "\067\142\070\066\072\051\074\153\075\155\077\125\101" +
    "\061\102\140\104\147\105\056\106\062\107\130\110\123" +
    "\111\050\112\116\113\075\114\135\115\067\116\122\117" +
    "\071\120\100\122\156\001\002\000\004\103\243\001\002" +
    "\000\004\004\234\001\002\000\012\037\236\040\237\041" +
    "\240\042\242\001\002\000\004\103\uff85\001\002\000\016" +
    "\036\uff9c\057\uff9c\060\uff9c\073\uff9c\103\uff9c\144\uff9c\001" +
    "\002\000\016\036\uff9d\057\uff9d\060\uff9d\073\uff9d\103\uff9d" +
    "\144\uff9d\001\002\000\016\036\uff9b\057\uff9b\060\uff9b\073" +
    "\uff9b\103\uff9b\144\uff9b\001\002\000\004\103\uff84\001\002" +
    "\000\004\103\uff83\001\002\000\154\004\070\005\106\006" +
    "\146\007\054\010\053\011\154\012\124\013\103\014\117" +
    "\015\060\026\114\030\074\031\136\032\073\034\127\036" +
    "\111\037\047\040\055\041\072\042\145\043\063\045\134" +
    "\047\101\051\150\053\113\055\104\057\152\060\115\061" +
    "\126\063\112\066\052\067\142\070\066\072\051\074\153" +
    "\075\155\077\125\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\120\100\122\156\001\002\000" +
    "\156\004\070\005\106\006\146\007\054\010\053\011\154" +
    "\012\124\013\103\014\117\015\060\026\114\027\245\030" +
    "\074\031\136\032\073\034\127\036\111\037\047\040\055" +
    "\041\072\042\145\043\063\045\134\047\101\051\150\053" +
    "\113\055\104\057\152\060\115\061\126\063\112\066\052" +
    "\067\142\070\066\072\051\074\153\075\155\077\125\101" +
    "\061\102\140\104\147\105\056\106\062\107\130\110\123" +
    "\111\050\112\116\113\075\114\135\115\067\116\122\117" +
    "\071\120\100\122\156\001\002\000\172\004\uff89\005\uff89" +
    "\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\045\uff89\047\uff89\051\uff89\053\uff89" +
    "\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\072\uff89" +
    "\074\uff89\075\uff89\077\uff89\101\uff89\102\uff89\104\uff89\105" +
    "\uff89\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89\113\uff89" +
    "\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89\122\uff89\001" +
    "\002\000\156\004\070\005\106\006\146\007\054\010\053" +
    "\011\154\012\124\013\103\014\117\015\060\026\114\027" +
    "\247\030\074\031\136\032\073\034\127\036\111\037\047" +
    "\040\055\041\072\042\145\043\063\045\134\047\101\051" +
    "\150\053\113\055\104\057\152\060\115\061\126\063\112" +
    "\066\052\067\142\070\066\072\051\074\153\075\155\077" +
    "\125\101\061\102\140\104\147\105\056\106\062\107\130" +
    "\110\123\111\050\112\116\113\075\114\135\115\067\116" +
    "\122\117\071\120\100\122\156\001\002\000\172\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\014\uff88\015\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\031\uff88\032\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\045\uff88\047\uff88\051\uff88" +
    "\053\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\072\uff88\074\uff88\075\uff88\077\uff88\101\uff88\102\uff88\104" +
    "\uff88\105\uff88\106\uff88\107\uff88\110\uff88\111\uff88\112\uff88" +
    "\113\uff88\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88\122" +
    "\uff88\001\002\000\070\004\070\031\136\032\073\036\111" +
    "\037\047\040\055\041\072\042\145\054\251\057\152\060" +
    "\115\066\052\067\142\101\061\102\140\104\147\105\056" +
    "\106\062\107\130\110\123\111\050\112\116\113\075\114" +
    "\135\115\067\116\122\117\071\001\002\000\172\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\045\uffa9\047\uffa9\051\uffa9" +
    "\053\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\072\uffa9\074\uffa9\075\uffa9\077\uffa9\101\uffa9\102\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\112\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\122" +
    "\uffa9\001\002\000\004\103\273\001\002\000\006\067\257" +
    "\103\uff76\001\002\000\004\065\204\001\002\000\006\066" +
    "\256\103\uff75\001\002\000\004\004\262\001\002\000\004" +
    "\004\260\001\002\000\004\114\261\001\002\000\006\066" +
    "\uff70\103\uff70\001\002\000\010\110\266\112\265\113\263" +
    "\001\002\000\006\067\uff71\103\uff71\001\002\000\006\067" +
    "\uff74\103\uff74\001\002\000\006\067\uff72\103\uff72\001\002" +
    "\000\006\067\uff73\103\uff73\001\002\000\004\103\uff77\001" +
    "\002\000\006\064\271\065\204\001\002\000\172\004\uff79" +
    "\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013" +
    "\uff79\014\uff79\015\uff79\025\uff79\026\uff79\027\uff79\030\uff79" +
    "\031\uff79\032\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\045\uff79\047\uff79\051\uff79" +
    "\053\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79\062" +
    "\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79" +
    "\072\uff79\074\uff79\075\uff79\077\uff79\101\uff79\102\uff79\104" +
    "\uff79\105\uff79\106\uff79\107\uff79\110\uff79\111\uff79\112\uff79" +
    "\113\uff79\114\uff79\115\uff79\116\uff79\117\uff79\120\uff79\122" +
    "\uff79\001\002\000\004\103\uff78\001\002\000\004\065\204" +
    "\001\002\000\006\064\275\065\204\001\002\000\172\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\025\uff7a\026\uff7a\027\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a" +
    "\040\uff7a\041\uff7a\042\uff7a\043\uff7a\045\uff7a\047\uff7a\051" +
    "\uff7a\053\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070" +
    "\uff7a\072\uff7a\074\uff7a\075\uff7a\077\uff7a\101\uff7a\102\uff7a" +
    "\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112" +
    "\uff7a\113\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a" +
    "\122\uff7a\001\002\000\004\004\325\001\002\000\014\036" +
    "\uff81\057\uff81\060\uff81\103\uff81\144\uff81\001\002\000\014" +
    "\036\uff7e\057\uff7e\060\uff7e\103\uff7e\144\uff7e\001\002\000" +
    "\004\004\323\001\002\000\154\004\070\005\106\006\146" +
    "\007\054\010\053\011\154\012\124\013\103\014\117\015" +
    "\060\026\114\030\074\031\136\032\073\034\127\036\111" +
    "\037\047\040\055\041\072\042\145\043\063\045\134\047" +
    "\101\051\150\053\113\055\104\057\152\060\115\061\126" +
    "\063\112\066\052\067\142\070\066\072\051\074\153\075" +
    "\155\077\125\101\061\102\140\104\147\105\056\106\062" +
    "\107\130\110\123\111\050\112\116\113\075\114\135\115" +
    "\067\116\122\117\071\120\100\122\156\001\002\000\004" +
    "\004\317\001\002\000\014\036\301\057\306\060\303\103" +
    "\314\144\276\001\002\000\014\036\uff80\057\uff80\060\uff80" +
    "\103\uff80\144\uff80\001\002\000\004\004\311\001\002\000" +
    "\014\036\uff7d\057\uff7d\060\uff7d\103\uff7d\144\uff7d\001\002" +
    "\000\014\036\uff7f\057\uff7f\060\uff7f\103\uff7f\144\uff7f\001" +
    "\002\000\004\114\312\001\002\000\016\036\uff8e\057\uff8e" +
    "\060\uff8e\073\uff8e\103\uff8e\144\uff8e\001\002\000\014\036" +
    "\uff82\057\uff82\060\uff82\103\uff82\144\uff82\001\002\000\154" +
    "\004\070\005\106\006\146\007\054\010\053\011\154\012" +
    "\124\013\103\014\117\015\060\026\114\030\074\031\136" +
    "\032\073\034\127\036\111\037\047\040\055\041\072\042" +
    "\145\043\063\045\134\047\101\051\150\053\113\055\104" +
    "\057\152\060\115\061\126\063\112\066\052\067\142\070" +
    "\066\072\051\074\153\075\155\077\125\101\061\102\140" +
    "\104\147\105\056\106\062\107\130\110\123\111\050\112" +
    "\116\113\075\114\135\115\067\116\122\117\071\120\100" +
    "\122\156\001\002\000\156\004\070\005\106\006\146\007" +
    "\054\010\053\011\154\012\124\013\103\014\117\015\060" +
    "\026\114\030\074\031\136\032\073\034\127\036\111\037" +
    "\047\040\055\041\072\042\145\043\063\045\134\047\101" +
    "\051\150\053\113\055\104\056\316\057\152\060\115\061" +
    "\126\063\112\066\052\067\142\070\066\072\051\074\153" +
    "\075\155\077\125\101\061\102\140\104\147\105\056\106" +
    "\062\107\130\110\123\111\050\112\116\113\075\114\135" +
    "\115\067\116\122\117\071\120\100\122\156\001\002\000" +
    "\172\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87" +
    "\012\uff87\013\uff87\014\uff87\015\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\031\uff87\032\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\045\uff87\047" +
    "\uff87\051\uff87\053\uff87\055\uff87\056\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\072\uff87\074\uff87\075\uff87\077\uff87\101\uff87" +
    "\102\uff87\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111" +
    "\uff87\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87" +
    "\120\uff87\122\uff87\001\002\000\004\117\320\001\002\000" +
    "\014\036\uff7c\057\uff7c\060\uff7c\103\uff7c\144\uff7c\001\002" +
    "\000\156\004\070\005\106\006\146\007\054\010\053\011" +
    "\154\012\124\013\103\014\117\015\060\026\114\030\074" +
    "\031\136\032\073\034\127\036\111\037\047\040\055\041" +
    "\072\042\145\043\063\045\134\047\101\051\150\053\113" +
    "\055\104\056\322\057\152\060\115\061\126\063\112\066" +
    "\052\067\142\070\066\072\051\074\153\075\155\077\125" +
    "\101\061\102\140\104\147\105\056\106\062\107\130\110" +
    "\123\111\050\112\116\113\075\114\135\115\067\116\122" +
    "\117\071\120\100\122\156\001\002\000\172\004\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\015\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\045\uff86\047\uff86\051\uff86\053" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86" +
    "\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\072" +
    "\uff86\074\uff86\075\uff86\077\uff86\101\uff86\102\uff86\104\uff86" +
    "\105\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113" +
    "\uff86\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\122\uff86" +
    "\001\002\000\010\037\236\040\237\041\240\001\002\000" +
    "\016\036\uff9e\057\uff9e\060\uff9e\073\uff9e\103\uff9e\144\uff9e" +
    "\001\002\000\044\111\043\124\031\125\032\126\030\127" +
    "\034\130\033\131\036\132\045\133\027\134\035\135\041" +
    "\136\025\137\044\140\046\141\037\142\042\143\026\001" +
    "\002\000\014\036\uff7b\057\uff7b\060\uff7b\103\uff7b\144\uff7b" +
    "\001\002\000\004\017\uffdc\001\002\000\070\004\070\031" +
    "\136\032\073\036\111\037\047\040\055\041\072\042\145" +
    "\050\331\057\152\060\115\066\052\067\142\101\061\102" +
    "\140\104\147\105\056\106\062\107\130\110\123\111\050" +
    "\112\116\113\075\114\135\115\067\116\122\117\071\001" +
    "\002\000\172\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\032\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\045" +
    "\uffac\047\uffac\051\uffac\053\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066" +
    "\uffac\067\uffac\070\uffac\072\uffac\074\uffac\075\uffac\077\uffac" +
    "\101\uffac\102\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110" +
    "\uffac\111\uffac\112\uffac\113\uffac\114\uffac\115\uffac\116\uffac" +
    "\117\uffac\120\uffac\122\uffac\001\002\000\070\004\070\031" +
    "\136\032\073\036\111\037\047\040\055\041\072\042\145" +
    "\057\152\060\115\066\052\067\142\101\061\102\140\104" +
    "\147\105\056\106\062\107\130\110\123\111\050\112\116" +
    "\113\075\114\135\115\067\116\122\117\071\121\333\001" +
    "\002\000\172\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\045" +
    "\uffa8\047\uffa8\051\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\072\uffa8\074\uffa8\075\uffa8\077\uffa8" +
    "\101\uffa8\102\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8\116\uffa8" +
    "\117\uffa8\120\uffa8\122\uffa8\001\002\000\070\004\070\031" +
    "\136\032\073\036\111\037\047\040\055\041\072\042\145" +
    "\057\152\060\115\066\052\067\142\071\335\101\061\102" +
    "\140\104\147\105\056\106\062\107\130\110\123\111\050" +
    "\112\116\113\075\114\135\115\067\116\122\117\071\001" +
    "\002\000\172\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\045" +
    "\uffa6\047\uffa6\051\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066" +
    "\uffa6\067\uffa6\070\uffa6\072\uffa6\074\uffa6\075\uffa6\077\uffa6" +
    "\101\uffa6\102\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\112\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6" +
    "\117\uffa6\120\uffa6\122\uffa6\001\002\000\070\004\070\031" +
    "\136\032\073\036\111\037\047\040\055\041\072\042\145" +
    "\044\337\057\152\060\115\066\052\067\142\101\061\102" +
    "\140\104\147\105\056\106\062\107\130\110\123\111\050" +
    "\112\116\113\075\114\135\115\067\116\122\117\071\001" +
    "\002\000\172\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\045" +
    "\uffae\047\uffae\051\uffae\053\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\072\uffae\074\uffae\075\uffae\077\uffae" +
    "\101\uffae\102\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\111\uffae\112\uffae\113\uffae\114\uffae\115\uffae\116\uffae" +
    "\117\uffae\120\uffae\122\uffae\001\002\000\012\036\uffa0\057" +
    "\uffa0\073\uffa0\103\uffa0\001\002\000\172\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\032\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\045\uffa4\047\uffa4\051\uffa4\053\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\072\uffa4" +
    "\074\uffa4\075\uffa4\077\uffa4\101\uffa4\102\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4\113\uffa4" +
    "\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\122\uffa4\001" +
    "\002\000\004\004\351\001\002\000\012\036\uff9f\057\uff9f" +
    "\073\uff9f\103\uff9f\001\002\000\012\036\uffa2\057\uffa2\073" +
    "\uffa2\103\uffa2\001\002\000\012\036\301\057\306\073\342" +
    "\103\350\001\002\000\012\036\uffa1\057\uffa1\073\uffa1\103" +
    "\uffa1\001\002\000\012\036\uffa3\057\uffa3\073\uffa3\103\uffa3" +
    "\001\002\000\172\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\045\uffa5\047\uffa5\051\uffa5\053\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\067\uffa5\070\uffa5\072\uffa5\074\uffa5\075\uffa5\077" +
    "\uffa5\101\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\111\uffa5\112\uffa5\113\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\122\uffa5\001\002\000\006\114\353" +
    "\115\352\001\002\000\012\036\uff8f\057\uff8f\073\uff8f\103" +
    "\uff8f\001\002\000\012\036\uff90\057\uff90\073\uff90\103\uff90" +
    "\001\002\000\012\036\uff91\057\uff91\073\uff91\103\uff91\001" +
    "\002\000\044\111\043\124\031\125\032\126\030\127\034" +
    "\130\033\131\036\132\045\133\027\134\035\135\041\136" +
    "\025\137\044\140\046\141\037\142\042\143\026\001\002" +
    "\000\006\033\uffd3\103\uffd3\001\002\000\004\103\uffd9\001" +
    "\002\000\006\033\013\103\uffda\001\002\000\004\103\uffdb" +
    "\001\002\000\154\004\070\005\106\006\146\007\054\010" +
    "\053\011\154\012\124\013\103\014\117\015\060\026\114" +
    "\030\074\031\136\032\073\034\127\036\111\037\047\040" +
    "\055\041\072\042\145\043\063\045\134\047\101\051\150" +
    "\053\113\055\104\057\152\060\115\061\126\063\112\066" +
    "\052\067\142\070\066\072\051\074\153\075\155\077\125" +
    "\101\061\102\140\104\147\105\056\106\062\107\130\110" +
    "\123\111\050\112\116\113\075\114\135\115\067\116\122" +
    "\117\071\120\100\122\156\001\002\000\004\025\364\001" +
    "\002\000\004\017\uffdd\001\002\000\044\111\043\124\031" +
    "\125\032\126\030\127\034\130\033\131\036\132\045\133" +
    "\027\134\035\135\041\136\025\137\044\140\046\141\037" +
    "\142\042\143\026\001\002\000\004\103\uffd2\001\002\000" +
    "\066\004\070\031\136\032\073\036\111\037\047\040\055" +
    "\041\072\042\145\057\152\060\115\066\052\067\142\101" +
    "\061\102\140\104\147\105\056\106\062\107\130\110\123" +
    "\111\050\112\116\113\075\114\135\115\067\116\122\117" +
    "\071\001\002\000\004\024\ufffc\001\002\000\004\021\372" +
    "\001\002\000\004\024\ufffd\001\002\000\070\004\070\023" +
    "\374\031\136\032\073\036\111\037\047\040\055\041\072" +
    "\042\145\057\152\060\115\066\052\067\142\101\061\102" +
    "\140\104\147\105\056\106\062\107\130\110\123\111\050" +
    "\112\116\113\075\114\135\115\067\116\122\117\071\001" +
    "\002\000\004\021\ufffb\001\002\000\004\017\376\001\002" +
    "\000\004\002\000\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\006\052\005\001\001\000\002\001\001\000\004" +
    "\052\374\001\001\000\004\013\370\001\001\000\002\001" +
    "\001\000\012\034\014\035\016\036\021\053\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\035\356\036" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\117\007\143\010\075\012\130\015\064\024\142\040" +
    "\101\041\131\042\107\043\140\044\120\045\104\046\076" +
    "\047\132\050\150\051\106\056\063\057\136\062\056\001" +
    "\001\000\002\001\001\000\004\035\022\001\001\000\002" +
    "\001\001\000\004\033\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\342\030\345\060\344\061\343\064\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\156\005" +
    "\335\007\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\156\005\333\007\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\156\005\331" +
    "\007\143\001\001\000\010\004\156\005\327\007\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\304" +
    "\014\277\030\307\037\306\054\276\055\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\251\017\252\021" +
    "\254\001\001\000\010\004\156\005\247\007\143\001\001" +
    "\000\004\032\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\173\001\001\000\046\004\117" +
    "\007\143\010\075\012\130\015\064\024\142\041\171\042" +
    "\107\043\140\044\120\045\104\046\076\047\132\050\150" +
    "\051\106\056\063\057\136\062\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\117\007\143\010\075" +
    "\012\130\015\064\024\142\042\170\043\140\044\120\045" +
    "\104\046\076\047\132\050\150\051\106\056\063\057\136" +
    "\062\056\001\001\000\002\001\001\000\010\004\156\005" +
    "\166\007\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\156\005\164\007\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\156\005\162\007\143\001\001\000\010\004\156\005\157" +
    "\007\143\001\001\000\002\001\001\000\006\004\160\007" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\160\007\143\001\001\000\002\001\001\000\006\004" +
    "\160\007\143\001\001\000\002\001\001\000\006\004\160" +
    "\007\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\117\007\143\010\075\012\130\015\064\024\142" +
    "\042\170\043\140\044\120\045\104\046\076\047\132\050" +
    "\150\051\106\056\063\057\136\062\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\204\023\205\001" +
    "\001\000\002\001\001\000\004\026\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\117\007\143\010\075\012\130\015\064" +
    "\024\142\041\210\042\107\043\140\044\120\045\104\046" +
    "\076\047\132\050\150\051\106\056\063\057\136\062\056" +
    "\001\001\000\004\023\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\117\007\143" +
    "\010\075\012\130\015\064\024\142\042\170\043\140\044" +
    "\120\045\104\046\076\047\132\050\150\051\106\056\063" +
    "\057\136\062\056\001\001\000\006\022\212\023\205\001" +
    "\001\000\004\023\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\156\005\221\007\143\001\001\000\006" +
    "\004\160\007\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\156\005\226\007\143" +
    "\001\001\000\006\004\160\007\143\001\001\000\002\001" +
    "\001\000\046\004\117\007\143\010\075\012\130\015\064" +
    "\024\142\041\245\042\107\043\140\044\120\045\104\046" +
    "\076\047\132\050\150\051\106\056\063\057\136\062\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\240\031\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\004\117\007\143\010\075\012\130" +
    "\015\064\024\142\041\243\042\107\043\140\044\120\045" +
    "\104\046\076\047\132\050\150\051\106\056\063\057\136" +
    "\062\056\001\001\000\044\004\117\007\143\010\075\012" +
    "\130\015\064\024\142\042\170\043\140\044\120\045\104" +
    "\046\076\047\132\050\150\051\106\056\063\057\136\062" +
    "\056\001\001\000\002\001\001\000\044\004\117\007\143" +
    "\010\075\012\130\015\064\024\142\042\170\043\140\044" +
    "\120\045\104\046\076\047\132\050\150\051\106\056\063" +
    "\057\136\062\056\001\001\000\002\001\001\000\006\004" +
    "\160\007\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\271\001\001\000\006\022\267\023\205\001" +
    "\001\000\004\017\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\273\023\205\001\001\000\004\023\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\117\007\143\010" +
    "\075\012\130\015\064\024\142\041\320\042\107\043\140" +
    "\044\120\045\104\046\076\047\132\050\150\051\106\056" +
    "\063\057\136\062\056\001\001\000\002\001\001\000\014" +
    "\011\304\014\277\030\307\037\306\054\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\117\007\143\010\075\012\130\015\064" +
    "\024\142\041\314\042\107\043\140\044\120\045\104\046" +
    "\076\047\132\050\150\051\106\056\063\057\136\062\056" +
    "\001\001\000\044\004\117\007\143\010\075\012\130\015" +
    "\064\024\142\042\170\043\140\044\120\045\104\046\076" +
    "\047\132\050\150\051\106\056\063\057\136\062\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\117\007\143\010\075\012\130\015\064\024" +
    "\142\042\170\043\140\044\120\045\104\046\076\047\132" +
    "\050\150\051\106\056\063\057\136\062\056\001\001\000" +
    "\002\001\001\000\004\027\323\001\001\000\002\001\001" +
    "\000\004\033\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\160\007\143\001\001\000\002\001\001" +
    "\000\006\004\160\007\143\001\001\000\002\001\001\000" +
    "\006\004\160\007\143\001\001\000\002\001\001\000\006" +
    "\004\160\007\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\342\030\345\061\346\064" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\360\001" +
    "\001\000\002\001\001\000\050\004\117\007\143\010\075" +
    "\012\130\015\064\024\142\040\362\041\131\042\107\043" +
    "\140\044\120\045\104\046\076\047\132\050\150\051\106" +
    "\056\063\057\136\062\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\365\001\001\000\002\001\001" +
    "\000\010\004\156\005\372\007\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\160" +
    "\007\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser1 mp = null;

	// Connect this parser to a scanner!
	public parser1(Lexer1 lex, ManejadorParser1 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser1$actions {
  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action_part00000000(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= html EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // html ::= HTML_AB head body HTML_CE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Body e = (Body)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		mp.procesarBody(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("html",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html ::= HTML_AB body HTML_CE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Body e = (Body)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		mp.procesarBody(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("html",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html ::= HTML_AB HTML_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("html",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // head ::= HEAD_AB title HEAD_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("head",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // head ::= HEAD_AB HEAD_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("head",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // title ::= TITLE_AB texto1 TITLE_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("title",9, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // texto ::= TEXTO_PLANO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("texto",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // texto ::= palabraReserv 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("texto",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // texto1 ::= texto1 texto 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e1 + " " + e2;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("texto1",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // texto1 ::= texto 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("texto1",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // palabraReserv ::= BG_COLOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // palabraReserv ::= TEXT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // palabraReserv ::= HEXADECIMAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // palabraReserv ::= ALIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // palabraReserv ::= LEFT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // palabraReserv ::= RIGHT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // palabraReserv ::= JUSTIFIED 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // palabraReserv ::= CENTER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // palabraReserv ::= PARAMETRO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // palabraReserv ::= TAMANO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // palabraReserv ::= SIZE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // palabraReserv ::= FACE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // palabraReserv ::= TYPE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // palabraReserv ::= START 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // palabraReserv ::= NAME 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // palabraReserv ::= HREF 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // palabraReserv ::= ENLACE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // palabraReserv ::= SQUARE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // palabraReserv ::= CIRCLE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // palabraReserv ::= DISC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // palabraReserv ::= ENTERO_UNO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // palabraReserv ::= MAY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // palabraReserv ::= MIN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // palabraReserv ::= ANCHO_PANTALLA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // palabraReserv ::= SIGNO_IGUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("palabraReserv",5, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // body ::= BODY_AB atributos CIERRE body1 BODY_CE 
            {
              Body RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Body e1 = (Body)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getBody(2, e2, e1);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("body",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // body ::= BODY_AB CIERRE body1 BODY_CE 
            {
              Body RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getBody(1, e, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("body",40, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // atributos ::= bgcolor text link 
            {
              Body RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Color e1 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Color e2 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e3 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(e1, e2, e3);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // atributos ::= bgcolor text 
            {
              Body RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Color e1 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e2 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(e1, e2, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // atributos ::= bgcolor link 
            {
              Body RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Color e1 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e2 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(e1, null, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributos ::= text link 
            {
              Body RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Color e1 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e2 = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(null, e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributos ::= bgcolor 
            {
              Body RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(e, null, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributos ::= text 
            {
              Body RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(null, e, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributos ::= link 
            {
              Body RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosBody(null, null, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributos",41, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bgcolor ::= BG_COLOR SIGNO_IGUAL color 
            {
              Color RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("bgcolor",26, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // text ::= TEXT SIGNO_IGUAL color 
            {
              Color RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("text",28, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // link ::= LINK SIGNO_IGUAL color 
            {
              Color RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("link",27, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // color ::= HEXADECIMAL 
            {
              Color RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getColor(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // color ::= BLACK 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#000000");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // color ::= OLIVE 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#808000");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // color ::= TEAL 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#008080");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // color ::= RED 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#ff0000");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // color ::= BLUE 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#0000ff");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // color ::= MAROON 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#800000");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // color ::= NAVY 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#000080");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // color ::= GRAY 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#d3d3d3");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // color ::= LIME 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#bfff00");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // color ::= FUCHSIA 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#ca2c92");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // color ::= GREEN 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#00ff00");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // color ::= WHITE 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#ffffff");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // color ::= PURPLE 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#800080");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // color ::= SILVER 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#c0c0c0");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // color ::= YELLOW 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#ffff00");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // color ::= AQUA 
            {
              Color RESULT =null;
		RESULT = mp.decodeColor("#00ffff");
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color",25, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // body1 ::= elemento1 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("body1",30, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elemento1 ::= elemento1 elementoRsv 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e1 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getElemento(e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elemento1",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elemento1 ::= elementoRsv 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elemento1",31, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elementoRsv ::= elementoSimple 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elementoRsv ::= centrado 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Centrado e = (Centrado)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setCentrado(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elementoRsv ::= parrafo 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Parrafo e = (Parrafo)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setParrafo(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elementoRsv ::= tipoLetra 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		TipoLetra e = (TipoLetra)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setTipoLetra(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elementoRsv ::= listaOrdenada 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // elementoRsv ::= listaDesordenada 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoRsv",32, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elementoSimple ::= estilo 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Estilo e = (Estilo)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setEstilo(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elementoSimple ::= cambioLinea 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		SaltoLinea e = (SaltoLinea)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setSaltoLinea(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elementoSimple ::= textoNoLinea 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		TextoNoLinea e = (TextoNoLinea)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setTextoNoLinea(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // elementoSimple ::= lineaHorizontal 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		LineaHorizontal e = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setLineaHorizontal(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elementoSimple ::= texto 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setTexto(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elementoSimple ::= simbolo 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setTexto(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elementoSimple ::= sangria 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Sangria e = (Sangria)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setSangria(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elementoSimple ::= enlaces 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Enlace e = (Enlace)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.setEnlace(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elementoSimple ::= codigoEmbebido 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("elementoSimple",33, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estilo ::= NEGRILLA_AB texto1 NEGRILLA_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(1, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estilo ::= SUBRAYADO_AB texto1 SUBRAYADO_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(2, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estilo ::= ITALICA_AB texto1 ITALICA_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(3, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // estilo ::= TACHADO_AB texto1 TACHADO_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(4, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estilo ::= PARPADEANTE_AB texto1 PARPADEANTE_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(1, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estilo ::= SUBINDICE_AB texto1 SUBINDICE_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(5, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estilo ::= SUPERINDICE_AB texto1 SUPERINDICE_CE 
            {
              Estilo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getEstilo(6, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("estilo",37, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cambioLinea ::= SALTO_LINEA 
            {
              SaltoLinea RESULT =null;
		RESULT = mp.getSaltoLinea();
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("cambioLinea",38, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // textoNoLinea ::= NOBR_AB texto1 NOBR_CE 
            {
              TextoNoLinea RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getTextoNoLinea(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("textoNoLinea",45, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lineaHorizontal ::= LINE_HOR_AB atributosLine1 CIERRE 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		LineaHorizontal e = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getLineaHorizontal(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lineaHorizontal",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lineaHorizontal ::= LINE_HOR_AB CIERRE 
            {
              LineaHorizontal RESULT =null;
		RESULT = mp.getLineaHorizontal(4,null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("lineaHorizontal",48, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // atributosLine1 ::= atributosLine1 atributosLine2 
            {
              LineaHorizontal RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		LineaHorizontal e1 = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		LineaHorizontal e2 = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosLineHor(e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosLine1",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // atributosLine1 ::= atributosLine2 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		LineaHorizontal e = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosLine1",46, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // atributosLine2 ::= align1 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = new LineaHorizontal(e, 0, 0, 0);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosLine2",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // atributosLine2 ::= width1 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		LineaHorizontal e = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosLine2",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // atributosLine2 ::= size1 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getLineaHorizontal(3, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosLine2",47, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // align1 ::= ALIGN SIGNO_IGUAL alignAux 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("align1",22, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // alignAux ::= RIGHT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = 1;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("alignAux",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // alignAux ::= LEFT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = 2;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("alignAux",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alignAux ::= CENTER 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = 3;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("alignAux",21, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simbolo ::= A_TILDE 
            {
              String RESULT =null;
		RESULT = "á";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // simbolo ::= E_TILDE 
            {
              String RESULT =null;
		RESULT = "é";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // simbolo ::= I_TILDE 
            {
              String RESULT =null;
		RESULT = "í";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // simbolo ::= O_TILDE 
            {
              String RESULT =null;
		RESULT = "ó";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // simbolo ::= U_TILDE 
            {
              String RESULT =null;
		RESULT = "ú";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // simbolo ::= N_TILDE_MAY 
            {
              String RESULT =null;
		RESULT = "Ñ";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // simbolo ::= N_TILDE_MIN 
            {
              String RESULT =null;
		RESULT = "ñ";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // simbolo ::= MENOR 
            {
              String RESULT =null;
		RESULT = "<";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // simbolo ::= MAYOR 
            {
              String RESULT =null;
		RESULT = ">";
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("simbolo",6, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // width1 ::= WIDTH SIGNO_IGUAL widthAux 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		LineaHorizontal e = (LineaHorizontal)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("width1",50, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // widthAux ::= TAMANO 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getLineaHorizontal(1, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("widthAux",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // widthAux ::= ANCHO_PANTALLA 
            {
              LineaHorizontal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getLineaHorizontal(2, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("widthAux",49, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // size1 ::= SIZE SIGNO_IGUAL TAMANO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("size1",7, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sangria ::= SANGRIA_AB texto1 SANGRIA_CE 
            {
              Sangria RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getSangria(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("sangria",39, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // enlaces ::= ENLACE_AB NAME SIGNO_IGUAL PARAMETRO CIERRE texto1 ENLACE_CE 
            {
              Enlace RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("enlaces",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // enlaces ::= ENLACE_AB HREF SIGNO_IGUAL ENLACE CIERRE texto1 ENLACE_CE 
            {
              Enlace RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("enlaces",44, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-6)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // centrado ::= CENTRADO_AB elemento1 CENTRADO_CE 
            {
              Centrado RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getCentrado(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("centrado",34, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parrafo ::= PARRAFO_AB atributosPa CIERRE elemento1 PARRAFO_CE 
            {
              Parrafo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getParrafo(e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parrafo",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parrafo ::= PARRAFO_AB CIERRE elemento1 PARRAFO_CE 
            {
              Parrafo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getParrafo(0, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("parrafo",35, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipoLetra ::= FONT_AB atributosFo CIERRE elemento1 FONT_CE 
            {
              TipoLetra RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)).right;
		TipoLetra e1 = (TipoLetra)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getTipoLetra(e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipoLetra",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tipoLetra ::= FONT_AB CIERRE elemento1 FONT_CE 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = mp.getTipoLetra(null, e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("tipoLetra",36, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // atributosPa ::= ALIGN SIGNO_IGUAL alignAux1 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosPa",24, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // alignAux1 ::= alignAux 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("alignAux1",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // alignAux1 ::= JUSTIFIED 
            {
              Integer RESULT =null;
		RESULT = 4;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("alignAux1",23, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // atributosFo ::= atributosFo atributosFo1 
            {
              TipoLetra RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		TipoLetra e1 = (TipoLetra)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		TipoLetra e2 = (TipoLetra)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.addAtributosTipoLetra(e1, e2);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo",43, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // atributosFo ::= atributosFo1 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		TipoLetra e = (TipoLetra)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo",43, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // atributosFo1 ::= size1 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = new TipoLetra(Integer.parseInt(e.substring(1, e.length() -1 )), 0, null, null, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo1",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // atributosFo1 ::= align1 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = new TipoLetra(0, e, null, null, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo1",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // atributosFo1 ::= face1 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = new TipoLetra(0, 0, e, null, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo1",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // atributosFo1 ::= color1 
            {
              TipoLetra RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = new TipoLetra(0, 0, null, e, null);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosFo1",42, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // face1 ::= FACE SIGNO_IGUAL PARAMETRO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = mp.getFace(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("face1",10, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // color1 ::= COLOR SIGNO_IGUAL color 
            {
              Color RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Color e = (Color)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		RESULT = e;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("color1",29, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // listaOrdenada ::= LIST_ORD_AB atributosOr CIERRE items LIST_ORD_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("listaOrdenada",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listaOrdenada ::= LIST_ORD_AB CIERRE items LIST_ORD_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("listaOrdenada",11, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // atributosOr ::= type star 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosOr",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // atributosOr ::= star type 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosOr",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // atributosOr ::= type 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosOr",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // atributosOr ::= star 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosOr",12, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // type ::= TYPE SIGNO_IGUAL type1 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // type1 ::= ENTERO_UNO 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type1",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // type1 ::= MAY 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type1",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // type1 ::= MIN 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type1",14, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // star ::= START SIGNO_IGUAL TAMANO 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("star",15, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // items ::= items item 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("items",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // items ::= item 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("items",16, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // item ::= ITEM elemento1 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("item",17, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // listaDesordenada ::= LIST_DES_AB atributosDe CIERRE items LIST_DES_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("listaDesordenada",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-4)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // listaDesordenada ::= LIST_DES_AB CIERRE items LIST_DES_CE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("listaDesordenada",18, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-3)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // atributosDe ::= TYPE SIGNO_IGUAL type2 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("atributosDe",19, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // type2 ::= CIRCLE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type2",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // type2 ::= SQUARE 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type2",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // type2 ::= DISC 
            {
              String RESULT =null;

              CUP$parser1$result = parser.getSymbolFactory().newSymbol("type2",20, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // codigoEmbebido ::= CODIGO_EMBEBIDO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		mp.runEmbebido(e);
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("codigoEmbebido",8, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
              return CUP$parser1$do_action_part00000000(
                               CUP$parser1$act_num,
                               CUP$parser1$parser,
                               CUP$parser1$stack,
                               CUP$parser1$top);
    }
}

}
