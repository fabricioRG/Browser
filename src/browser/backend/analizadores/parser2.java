
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import browser.backend.objects.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\016\003\000\002" +
    "\015\007\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\003\003\000\002\003\003\000" +
    "\002\017\010\000\002\006\003\000\002\024\003\000\002" +
    "\025\003\000\002\026\010\000\002\026\003\000\002\020" +
    "\011\000\002\021\005\000\002\022\007\000\002\007\004" +
    "\000\002\007\003\000\002\010\005\000\002\010\004\000" +
    "\002\011\003\000\002\011\003\000\002\023\006\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\030\007\013\010\023\025\014\030\006\031" +
    "\027\033\025\034\007\046\032\047\026\050\012\051\024" +
    "\001\002\000\036\002\ufffd\007\ufffd\010\ufffd\025\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\033\ufffd\034\ufffd\037\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\001\002\000\036\002\ufff8\007" +
    "\ufff8\010\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8" +
    "\034\ufff8\037\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\001" +
    "\002\000\016\007\013\010\023\034\007\047\026\050\057" +
    "\051\024\001\002\000\016\007\013\010\023\034\007\047" +
    "\026\050\057\051\024\001\002\000\004\002\140\001\002" +
    "\000\076\002\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1\042\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\001\002\000" +
    "\070\002\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\037\uffe2\040\134\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\001\002\000\076\002\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\037\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\001\002\000\016\007\013\010\023\034\007\047" +
    "\026\050\057\051\024\001\002\000\036\002\ufff7\007\ufff7" +
    "\010\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034" +
    "\ufff7\037\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002" +
    "\000\036\002\ufffa\007\ufffa\010\ufffa\025\ufffa\027\ufffa\030" +
    "\ufffa\031\ufffa\033\ufffa\034\ufffa\037\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\001\002\000\032\002\000\007\013\010" +
    "\023\025\014\030\006\031\027\033\025\034\007\046\032" +
    "\047\026\050\012\051\024\001\002\000\036\002\ufffb\007" +
    "\ufffb\010\ufffb\025\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb" +
    "\034\ufffb\037\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001" +
    "\002\000\036\002\ufffc\007\ufffc\010\ufffc\025\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\033\ufffc\034\ufffc\037\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\001\002\000\034\002\ufffe\007\ufffe" +
    "\010\ufffe\025\ufffe\030\ufffe\031\ufffe\033\ufffe\034\ufffe\037" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\001\002\000\076" +
    "\002\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\042\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002\000\076\002" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\037\uffe3\042\uffe3\045\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\001\002\000\004\034\111" +
    "\001\002\000\076\002\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001" +
    "\002\000\004\050\073\001\002\000\036\002\ufff9\007\ufff9" +
    "\010\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\034" +
    "\ufff9\037\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\001\002" +
    "\000\066\002\ufff6\007\ufff6\010\ufff6\011\050\012\044\013" +
    "\047\014\053\015\045\016\051\017\046\020\054\021\043" +
    "\022\052\023\042\024\055\025\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\033\ufff6\034\ufff6\037\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\001\002\000\004\050\033\001\002\000\004\041" +
    "\034\001\002\000\010\004\035\005\040\006\036\001\002" +
    "\000\004\042\ufff4\001\002\000\004\042\ufff2\001\002\000" +
    "\004\042\041\001\002\000\004\042\ufff3\001\002\000\036" +
    "\002\ufff5\007\ufff5\010\ufff5\025\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\033\ufff5\034\ufff5\037\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\001\002\000\016\007\013\010\023\034\007\047" +
    "\026\050\057\051\024\001\002\000\016\007\013\010\023" +
    "\034\007\047\026\050\057\051\024\001\002\000\016\007" +
    "\013\010\023\034\007\047\026\050\057\051\024\001\002" +
    "\000\016\007\013\010\023\034\007\047\026\050\057\051" +
    "\024\001\002\000\016\007\013\010\023\034\007\047\026" +
    "\050\057\051\024\001\002\000\016\007\013\010\023\034" +
    "\007\047\026\050\057\051\024\001\002\000\016\007\013" +
    "\010\023\034\007\047\026\050\057\051\024\001\002\000" +
    "\016\007\013\010\023\034\007\047\026\050\057\051\024" +
    "\001\002\000\016\007\013\010\023\034\007\047\026\050" +
    "\057\051\024\001\002\000\016\007\013\010\023\034\007" +
    "\047\026\050\057\051\024\001\002\000\016\007\013\010" +
    "\023\034\007\047\026\050\057\051\024\001\002\000\016" +
    "\007\013\010\023\034\007\047\026\050\057\051\024\001" +
    "\002\000\076\002\uffe7\007\uffe7\010\uffe7\011\050\012\044" +
    "\013\047\014\053\015\045\016\051\017\046\020\054\021" +
    "\043\022\052\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\042" +
    "\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002" +
    "\000\076\002\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\042\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\076\002\uffea\007\uffea\010\uffea\011\050\012\044\013\047" +
    "\014\053\015\045\016\051\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\033\uffea\034\uffea\035\uffea\037\uffea\042\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\001\002\000\076" +
    "\002\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\037\uffee\042\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\001\002\000\076\002" +
    "\uffe9\007\uffe9\010\uffe9\011\050\012\044\013\047\014\053" +
    "\015\045\016\051\017\046\020\054\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\033\uffe9\034\uffe9\035\uffe9\037\uffe9\042\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\076\002\uffed" +
    "\007\uffed\010\uffed\011\050\012\044\013\047\014\053\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\033" +
    "\uffed\034\uffed\035\uffed\037\uffed\042\uffed\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\051\uffed\001\002\000\076\002\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\047\014\053\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\037\ufff1\042\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\001\002\000\076\002\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\033\uffef\034" +
    "\uffef\035\uffef\037\uffef\042\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\001\002\000\076\002\uffeb\007\uffeb\010" +
    "\uffeb\011\050\012\044\013\047\014\053\015\045\016\051" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\037\uffeb\042\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\001\002\000\076\002\uffec\007\uffec\010\uffec" +
    "\011\050\012\044\013\047\014\053\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034\uffec\035" +
    "\uffec\037\uffec\042\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\001\002\000\076\002\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\047\014\053\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\037\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\001\002\000\076\002\uffe8\007\uffe8\010\uffe8\011\050" +
    "\012\044\013\047\014\053\015\045\016\051\017\046\020" +
    "\054\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\037" +
    "\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\001\002\000\076\002\uffe6\007\uffe6\010\uffe6\011\050\012" +
    "\044\013\047\014\053\015\045\016\051\017\046\020\054" +
    "\021\043\022\052\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6" +
    "\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001" +
    "\002\000\004\040\074\001\002\000\004\047\075\001\002" +
    "\000\004\032\076\001\002\000\004\047\077\001\002\000" +
    "\032\007\013\010\023\025\014\030\006\031\027\033\025" +
    "\034\007\045\101\046\032\047\026\050\012\051\024\001" +
    "\002\000\036\002\uffd8\007\uffd8\010\uffd8\025\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\033\uffd8\034\uffd8\037\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\001\002\000\004\036\103\001\002" +
    "\000\036\002\uffd9\007\uffd9\010\uffd9\025\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\033\uffd9\034\uffd9\037\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\001\002\000\030\007\013\010\023\025" +
    "\014\030\006\031\027\033\025\034\007\046\032\047\026" +
    "\050\012\051\024\001\002\000\032\007\013\010\023\025" +
    "\014\030\006\031\027\033\025\034\007\037\105\046\032" +
    "\047\026\050\012\051\024\001\002\000\004\044\107\001" +
    "\002\000\034\002\uffff\007\uffff\010\uffff\025\uffff\030\uffff" +
    "\031\uffff\033\uffff\034\uffff\037\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\001\002\000\004\042\110\001\002\000\036" +
    "\002\uffda\007\uffda\010\uffda\025\uffda\027\uffda\030\uffda\031" +
    "\uffda\033\uffda\034\uffda\037\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\001\002\000\006\050\116\051\112\001\002\000" +
    "\006\035\uffd1\043\uffd1\001\002\000\006\035\uffd4\043\123" +
    "\001\002\000\006\050\116\051\112\001\002\000\004\035" +
    "\117\001\002\000\006\035\uffd0\043\uffd0\001\002\000\004" +
    "\042\120\001\002\000\036\002\uffd6\007\uffd6\010\uffd6\025" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\037\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\006\035" +
    "\uffd5\043\122\001\002\000\006\050\uffd3\051\uffd3\001\002" +
    "\000\006\050\uffd2\051\uffd2\001\002\000\004\026\126\001" +
    "\002\000\064\007\uffdd\010\uffdd\011\050\012\044\013\047" +
    "\014\053\015\045\016\051\017\046\020\054\021\043\022" +
    "\052\023\042\024\055\025\uffdd\026\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\034\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\001\002\000\032\007\013\010\023\025\014\030\006" +
    "\031\027\033\025\034\007\045\101\046\032\047\026\050" +
    "\012\051\024\001\002\000\004\027\131\001\002\000\004" +
    "\027\uffdc\001\002\000\032\007\013\010\023\025\014\030" +
    "\006\031\027\033\025\034\007\045\101\046\032\047\026" +
    "\050\012\051\024\001\002\000\036\002\uffde\007\uffde\010" +
    "\uffde\025\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde" +
    "\037\uffde\046\uffde\047\uffde\050\uffde\051\uffde\001\002\000" +
    "\036\002\uffdb\007\uffdb\010\uffdb\025\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\033\uffdb\034\uffdb\037\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\001\002\000\016\007\013\010\023\034\007" +
    "\047\026\050\057\051\024\001\002\000\004\042\137\001" +
    "\002\000\034\011\050\012\044\013\047\014\053\015\045" +
    "\016\051\017\046\020\054\021\043\022\052\023\042\024" +
    "\055\042\uffce\001\002\000\036\002\uffcf\007\uffcf\010\uffcf" +
    "\025\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\037" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000\004" +
    "\002\001\001\002\000\034\011\050\012\044\013\047\014" +
    "\053\015\045\016\051\017\046\020\054\021\043\022\052" +
    "\023\042\024\055\035\142\001\002\000\076\002\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\037\uffe5\042\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\001\002\000\032\007\013\010\023" +
    "\025\014\030\006\031\027\033\025\034\007\045\101\046" +
    "\032\047\026\050\012\051\024\001\002\000\036\002\uffd7" +
    "\007\uffd7\010\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\033" +
    "\uffd7\034\uffd7\037\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\032\002\007\003\010\004\030\013\016\014" +
    "\021\015\003\016\020\017\017\020\015\021\027\022\004" +
    "\023\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\010\004\124\006\142\001\001\000\006\003\010" +
    "\004\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\010\004\124" +
    "\006\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\010\004\030\014\105\015\003\016\020\017\017" +
    "\020\015\021\027\022\004\023\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\010\004\071\001" +
    "\001\000\006\003\010\004\070\001\001\000\006\003\010" +
    "\004\067\001\001\000\006\003\010\004\066\001\001\000" +
    "\006\003\010\004\065\001\001\000\006\003\010\004\064" +
    "\001\001\000\006\003\010\004\063\001\001\000\006\003" +
    "\010\004\062\001\001\000\006\003\010\004\061\001\001" +
    "\000\006\003\010\004\060\001\001\000\006\003\010\004" +
    "\057\001\001\000\006\003\010\004\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\010\004\030\014\101\015\003\016\020" +
    "\017\017\020\015\021\027\022\004\023\014\026\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\010\004\030\013\103\014\021\015\003\016" +
    "\020\017\017\020\015\021\027\022\004\023\014\001\001" +
    "\000\026\003\010\004\030\014\105\015\003\016\020\017" +
    "\017\020\015\021\027\022\004\023\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\114\010\113\011\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\010" +
    "\004\030\014\101\015\003\016\020\017\017\020\015\021" +
    "\027\022\004\023\014\024\126\026\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\010\004\030\014" +
    "\101\015\003\016\020\017\017\020\015\021\027\022\004" +
    "\023\014\025\131\026\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\010\004\135\005\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\010\004\030\014\101\015\003\016\020\017\017\020" +
    "\015\021\027\022\004\023\014\026\143\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser2 mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer2 lex, ManejadorParser2 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= elemento1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.procesar(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemento1 ::= elemento1 elemento 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Elemento e1 = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e2 = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getElemento(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento1",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemento1 ::= elemento 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento1",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= varDecla 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= operaciones 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= condicional 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= cicloFor 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= cicloWhile 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // elemento ::= print 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elemento ::= asignacion 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operaciones ::= operacion 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setOperacion(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operaciones",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecla ::= VAR VARIABLE DOS_PUNTOS tipoVar PUNTO_COMA 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.setVariables(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("varDecla",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoVar ::= INTEGER 
            {
              Integer RESULT =null;
		RESULT = 2;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVar ::= BOOLEAN 
            {
              Integer RESULT =null;
		RESULT = 3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVar ::= STRING 
            {
              Integer RESULT =null;
		RESULT = 1;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion ::= operacion MAS operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= operacion MENOS operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= operacion MULTIPLICACION operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= operacion DIVISION operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= operacion MENOR_QUE operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= operacion MAYOR_QUE operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= operacion MAYOR_IGUAL operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= operacion MENOR_IGUAL operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= operacion IGUAL_QUE operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion ::= operacion DIFERENTE_QUE operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion ::= operacion OR operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= operacion AND operacion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= PAR_AB operacion PAR_CE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1 + e2 + e3;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operacion ::= NUMERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= TEXTO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= VARIABLE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= booleano 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // booleano ::= TRUE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("booleano",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // booleano ::= FALSE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("booleano",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional ::= IF condicion THEN bloque1 ELSE bloque2 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Operacion e1 = (Operacion)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Bloque e2 = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Bloque e3 = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setCondicional(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicional",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= operacion 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setCondicion(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicion",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque1 ::= bloque 
            {
              Bloque RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Bloque e = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloque2 ::= bloque 
            {
              Bloque RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Bloque e = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque2",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque ::= BEGIN COR_AB elemento1 COR_CE END PUNTO_COMA 
            {
              Bloque RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		RESULT = mp.setBloque(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque ::= elemento 
            {
              Bloque RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Elemento e = (Elemento)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setBloque(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cicloFor ::= FOR VARIABLE ASIGNACION NUMERO TO NUMERO bloque 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Bloque e4 = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setCicloFor(e1, e2, e3, e4);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("cicloFor",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cicloWhile ::= WHILE condicion bloque 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Operacion e1 = (Operacion)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Bloque e2 = (Bloque)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setCicloWhile(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("cicloWhile",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // print ::= PRINT PAR_AB tokens PAR_CE PUNTO_COMA 
            {
              Elemento RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		RESULT = mp.setPrint(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tokens ::= token1 token2 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.addToken(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tokens",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tokens ::= token2 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tokens",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // token1 ::= token1 token2 COMA 
            {
              Token RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Token e1 = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Token e2 = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.addToken(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token1",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // token1 ::= token2 COMA 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token1",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // token2 ::= TEXTO 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setToken(e, null);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token2",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // token2 ::= VARIABLE 
            {
              Token RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setToken(null, e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token2",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion ::= VARIABLE ASIGNACION expresion PUNTO_COMA 
            {
              Elemento RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Operacion e2 = (Operacion)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.setAsignacion(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= operacion 
            {
              Operacion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.setCondicion(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
