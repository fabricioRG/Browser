
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import browser.backend.objects.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\024" +
    "\004\000\002\024\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\003\007\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\004\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\014\003\000" +
    "\002\006\005\000\002\006\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\007\010" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\026\003\000\002\027\003\000\002" +
    "\030\010\000\002\030\003\000\002\032\011\000\002\033" +
    "\005\000\002\034\007\000\002\020\004\000\002\020\003" +
    "\000\002\021\005\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\031\006\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\024\025\013\030\006\031\032\033\027\034" +
    "\007\046\034\047\030\050\012\051\026\001\002\000\032" +
    "\002\ufffd\025\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\034" +
    "\ufffd\037\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002" +
    "\000\032\002\ufff6\025\ufff6\027\ufff6\030\ufff6\031\ufff6\033" +
    "\ufff6\034\ufff6\037\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\001\002\000\016\007\141\010\142\034\007\047\030\050" +
    "\070\051\026\001\002\000\012\034\007\047\030\050\070" +
    "\051\026\001\002\000\004\002\157\001\002\000\032\002" +
    "\ufffb\025\ufffb\027\ufffb\030\ufffb\031\ufffb\033\ufffb\034\ufffb" +
    "\037\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001\002\000" +
    "\060\002\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\037\uffe7\040\153" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\016\007" +
    "\141\010\142\034\007\047\030\050\070\051\026\001\002" +
    "\000\032\002\ufff5\025\ufff5\027\ufff5\030\ufff5\031\ufff5\033" +
    "\ufff5\034\ufff5\037\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\001\002\000\036\002\ufffa\023\123\024\124\025\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\033\ufffa\034\ufffa\037\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\051\ufffa\001\002\000\072\002\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\037\uffea\042\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\001\002\000\072\002\uffed\011\uffed\012\uffed\013\116" +
    "\014\117\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\033\uffed\034\uffed\035\uffed\037\uffed\042\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000\032" +
    "\002\ufff8\025\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\037\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002" +
    "\000\026\002\000\025\013\030\006\031\032\033\027\034" +
    "\007\046\034\047\030\050\012\051\026\001\002\000\064" +
    "\002\ufff0\011\113\012\114\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\033\ufff0\034\ufff0\037\ufff0\042" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002" +
    "\000\032\002\ufff9\025\ufff9\027\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\034\ufff9\037\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\001\002\000\046\002\ufffc\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\025\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\033\ufffc\034\ufffc\037\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\001\002\000\030\002\ufffe\025\ufffe\030\ufffe\031\ufffe" +
    "\033\ufffe\034\ufffe\037\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\001\002\000\072\002\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\042\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000\004" +
    "\034\100\001\002\000\072\002\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\042\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\001\002\000" +
    "\016\015\062\016\063\017\067\020\066\021\065\022\064" +
    "\001\002\000\004\050\044\001\002\000\032\002\ufff7\025" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7\037\ufff7" +
    "\046\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002\000\004\050" +
    "\035\001\002\000\004\041\036\001\002\000\010\004\037" +
    "\005\042\006\041\001\002\000\004\042\ufff3\001\002\000" +
    "\004\042\043\001\002\000\004\042\ufff1\001\002\000\004" +
    "\042\ufff2\001\002\000\032\002\ufff4\025\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\033\ufff4\034\ufff4\037\ufff4\046\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\001\002\000\004\040\045\001\002\000" +
    "\004\047\046\001\002\000\004\032\047\001\002\000\004" +
    "\047\050\001\002\000\026\025\013\030\006\031\032\033" +
    "\027\034\007\045\052\046\034\047\030\050\012\051\026" +
    "\001\002\000\032\002\uffcc\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\033\uffcc\034\uffcc\037\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\001\002\000\004\036\054\001\002\000\032\002" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\037\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000" +
    "\024\025\013\030\006\031\032\033\027\034\007\046\034" +
    "\047\030\050\012\051\026\001\002\000\026\025\013\030" +
    "\006\031\032\033\027\034\007\037\056\046\034\047\030" +
    "\050\012\051\026\001\002\000\004\044\060\001\002\000" +
    "\030\002\uffff\025\uffff\030\uffff\031\uffff\033\uffff\034\uffff" +
    "\037\uffff\046\uffff\047\uffff\050\uffff\051\uffff\001\002\000" +
    "\004\042\061\001\002\000\032\002\uffce\025\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\037\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\001\002\000\012\034\007\047\030" +
    "\050\070\051\026\001\002\000\012\034\007\047\030\050" +
    "\070\051\026\001\002\000\012\034\007\047\030\050\070" +
    "\051\026\001\002\000\012\034\007\047\030\050\070\051" +
    "\026\001\002\000\012\034\007\047\030\050\070\051\026" +
    "\001\002\000\012\034\007\047\030\050\070\051\026\001" +
    "\002\000\072\002\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\037\uffe7\042\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\056\002\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\034\uffdf\037\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\001\002\000\042\002\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\034" +
    "\uffe3\037\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3" +
    "\001\002\000\042\002\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\037\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\001\002\000" +
    "\042\002\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\037\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\001\002\000\042\002\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\033\uffe1\034\uffe1\037\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\001\002\000\042\002\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\037\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\001\002\000\042\002\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\037" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002" +
    "\000\006\050\105\051\101\001\002\000\006\035\uffc5\043" +
    "\uffc5\001\002\000\006\035\uffc8\043\112\001\002\000\004" +
    "\035\110\001\002\000\006\050\105\051\101\001\002\000" +
    "\006\035\uffc4\043\uffc4\001\002\000\006\035\uffc9\043\107" +
    "\001\002\000\006\050\uffc7\051\uffc7\001\002\000\004\042" +
    "\111\001\002\000\032\002\uffca\025\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\uffca\034\uffca\037\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\001\002\000\006\050\uffc6\051\uffc6\001\002" +
    "\000\012\034\007\047\030\050\070\051\026\001\002\000" +
    "\012\034\007\047\030\050\070\051\026\001\002\000\072" +
    "\002\uffee\011\uffee\012\uffee\013\116\014\117\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\033\uffee\034" +
    "\uffee\035\uffee\037\uffee\042\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\001\002\000\012\034\007\047\030\050" +
    "\070\051\026\001\002\000\012\034\007\047\030\050\070" +
    "\051\026\001\002\000\072\002\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\042\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000" +
    "\072\002\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\042\uffec\045\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\001\002\000\072\002\uffef\011\uffef" +
    "\012\uffef\013\116\014\117\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\033\uffef\034\uffef\035\uffef\037" +
    "\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\001\002\000\016\007\127\010\131\034\007\047\030\050" +
    "\130\051\026\001\002\000\016\007\127\010\131\034\007" +
    "\047\030\050\130\051\026\001\002\000\042\002\uffde\023" +
    "\133\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\033\uffde\034\uffde\037\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\001\002\000\042\002\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\037\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\001\002\000\042\002\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\037\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002\000" +
    "\066\002\uffd6\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6" +
    "\034\uffd6\037\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\001\002\000\042\002\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\037" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002" +
    "\000\042\002\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\033\uffda\034\uffda\037\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\001\002\000\016\007" +
    "\127\010\131\034\007\047\030\050\130\051\026\001\002" +
    "\000\016\007\127\010\131\034\007\047\030\050\130\051" +
    "\026\001\002\000\042\002\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc\037" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\042\002\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\037\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\051\uffdb\001\002\000\042\002" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\031\uffdd\033\uffdd\034\uffdd\037\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\001\002\000\030\025\uffd3\026\uffd3" +
    "\030\uffd3\031\uffd3\033\uffd3\034\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\030\025\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\001\002\000\030\025\uffd1\026\uffd1" +
    "\030\uffd1\031\uffd1\033\uffd1\034\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\001\002\000\004\026\145\001\002" +
    "\000\034\023\123\024\124\025\uffd4\026\uffd4\030\uffd4\031" +
    "\uffd4\033\uffd4\034\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\001\002\000\026\025\013\030\006\031\032\033" +
    "\027\034\007\045\052\046\034\047\030\050\012\051\026" +
    "\001\002\000\004\027\uffd0\001\002\000\004\027\150\001" +
    "\002\000\026\025\013\030\006\031\032\033\027\034\007" +
    "\045\052\046\034\047\030\050\012\051\026\001\002\000" +
    "\032\002\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5" +
    "\034\uffd5\037\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001" +
    "\002\000\032\002\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\034\uffcf\037\uffcf\046\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\001\002\000\012\034\007\047\030\050\070\051\026" +
    "\001\002\000\004\042\uffc2\001\002\000\004\042\156\001" +
    "\002\000\032\002\uffc3\025\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\033\uffc3\034\uffc3\037\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\001\002\000\004\002\001\001\002\000\010\011\113" +
    "\012\114\035\161\001\002\000\072\002\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\042\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\001" +
    "\002\000\026\025\013\030\006\031\032\033\027\034\007" +
    "\045\052\046\034\047\030\050\012\051\026\001\002\000" +
    "\032\002\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\034\uffcb\037\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\042\002\007\003\003\004\023\005\010\006" +
    "\014\007\022\011\021\012\016\013\015\014\030\024\020" +
    "\025\024\031\013\032\017\033\032\034\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\070\005\137" +
    "\006\143\011\021\012\016\013\015\014\030\017\161\001" +
    "\001\000\010\011\157\012\016\013\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\070\005\137\006\143\011\021\012\016\013\015\014\030" +
    "\017\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\003\004\023\005\010\006\014\007\022\011\021\012" +
    "\016\013\015\014\030\025\056\031\013\032\017\033\032" +
    "\034\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\003\004\023\005\010\006\014" +
    "\007\022\011\021\012\016\013\015\014\030\025\052\030" +
    "\050\031\013\032\017\033\032\034\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\003\004\023\005\010\006\014\007\022\011\021\012\016" +
    "\013\015\014\030\024\054\025\024\031\013\032\017\033" +
    "\032\034\004\001\001\000\036\003\003\004\023\005\010" +
    "\006\014\007\022\011\021\012\016\013\015\014\030\025" +
    "\056\031\013\032\017\033\032\034\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\070\011\021\012\016\013\015\014\076" +
    "\001\001\000\014\004\070\011\021\012\016\013\015\014" +
    "\075\001\001\000\014\004\070\011\021\012\016\013\015" +
    "\014\074\001\001\000\014\004\070\011\021\012\016\013" +
    "\015\014\073\001\001\000\014\004\070\011\021\012\016" +
    "\013\015\014\072\001\001\000\014\004\070\011\021\012" +
    "\016\013\015\014\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\102\021\103\022\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\121\013\015\001\001\000\006\012\114\013" +
    "\015\001\001\000\002\001\001\000\004\013\120\001\001" +
    "\000\004\013\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\070\005\125\011\021" +
    "\012\016\013\015\014\030\015\136\016\131\001\001\000" +
    "\022\004\070\005\125\011\021\012\016\013\015\014\030" +
    "\015\124\016\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\070\005\125\011\021\012" +
    "\016\013\015\014\030\016\135\001\001\000\020\004\070" +
    "\005\125\011\021\012\016\013\015\014\030\016\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\003\004\023" +
    "\005\010\006\014\007\022\011\021\012\016\013\015\014" +
    "\030\025\052\026\146\030\145\031\013\032\017\033\032" +
    "\034\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\003\004\023\005\010\006\014\007\022\011\021" +
    "\012\016\013\015\014\030\025\052\027\150\030\151\031" +
    "\013\032\017\033\032\034\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\153\011\021\012\016\013" +
    "\015\023\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\003\004\023\005\010\006\014" +
    "\007\022\011\021\012\016\013\015\014\030\025\052\030" +
    "\162\031\013\032\017\033\032\034\004\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser2 mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer2 lex, ManejadorParser2 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= elemento1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemento1 ::= elemento1 elemento 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemento1 ::= elemento 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= varDecla 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= opAritmetica 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= opRelacional 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= opLogica 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= condicional 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // elemento ::= cicloFor 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // elemento ::= cicloWhile 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // elemento ::= print 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // elemento ::= asignacion 
            {
              Elemento RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elemento",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDecla ::= VAR VARIABLE DOS_PUNTOS tipoVar PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("varDecla",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVar ::= INTEGER 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVar ::= BOOLEAN 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipoVar ::= STRING 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipoVar",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opAritmetica ::= op1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opAritmetica",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // op1 ::= op1 MAS op2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op1",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // op1 ::= op1 MENOS op2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op1",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op1 ::= op2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op1",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op2 ::= op2 MULTIPLICACION op3 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op2",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op2 ::= op2 DIVISION op3 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op2",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op2 ::= op3 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op2",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op3 ::= PAR_AB op1 PAR_CE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op3",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op3 ::= NUMERO 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op3",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op3 ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op3",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op3 ::= TEXTO 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("op3",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opRelacional ::= relacional1 MAYOR_QUE relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opRelacional ::= relacional1 MENOR_QUE relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // opRelacional ::= relacional1 MAYOR_IGUAL relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opRelacional ::= relacional1 MENOR_IGUAL relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opRelacional ::= relacional1 IGUAL_QUE relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opRelacional ::= relacional1 DIFERENTE_QUE relacional1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRelacional",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // relacional1 ::= opAritmetica 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("relacional1",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opLogica ::= opLogica OR logica1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opLogica",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opLogica ::= opLogica AND logica1 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opLogica",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logica1 ::= logica1 OR logica2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica1",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logica1 ::= logica1 AND logica2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica1",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logica1 ::= logica2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica1",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logica2 ::= opRelacional 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica2",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logica2 ::= TRUE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica2",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logica2 ::= FALSE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica2",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // logica2 ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("logica2",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicional ::= IF condicion THEN bloque1 ELSE bloque2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicional",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= opLogica 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= opRelacional 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= TRUE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= FALSE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque1 ::= bloque 
            {
              Bloque RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque1",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque2 ::= bloque 
            {
              Bloque RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque2",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque ::= BEGIN COR_AB elemento1 COR_CE END PUNTO_COMA 
            {
              Bloque RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque ::= elemento 
            {
              Bloque RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bloque",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cicloFor ::= FOR VARIABLE ASIGNACION NUMERO TO NUMERO bloque 
            {
              CicloFor RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("cicloFor",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-6)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cicloWhile ::= WHILE condicion bloque 
            {
              CicloWhile RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("cicloWhile",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // print ::= PRINT PAR_AB tokens PAR_CE PUNTO_COMA 
            {
              Print RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("print",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tokens ::= token1 token2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tokens",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tokens ::= token2 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tokens",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // token1 ::= token1 token2 COMA 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token1",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // token1 ::= token2 COMA 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token1",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // token2 ::= TEXTO 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token2",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // token2 ::= VARIABLE 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("token2",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= VARIABLE ASIGNACION expresion PUNTO_COMA 
            {
              Asignacion RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("asignacion",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= opAritmetica 
            {
              String RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
