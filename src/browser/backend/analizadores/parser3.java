
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import browser.backend.objects.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser3 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym2.class;
}

  /** Default constructor. */
  @Deprecated
  public parser3() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser3(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser3(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\005" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\016\007\006\010\011\034\012\047\010\050" +
    "\007\051\004\001\002\000\036\002\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\035\ufff0\001\002\000\004" +
    "\002\050\001\002\000\036\002\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\035\uffed\001\002\000\036\002" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\035" +
    "\uffef\001\002\000\036\002\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\035\ufff1\001\002\000\036\002\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\035\uffec" +
    "\001\002\000\016\007\006\010\011\034\012\047\010\050" +
    "\007\051\004\001\002\000\034\002\uffff\011\024\012\020" +
    "\013\023\014\027\015\021\016\026\017\022\020\031\021" +
    "\017\022\025\023\016\024\030\001\002\000\004\002\000" +
    "\001\002\000\036\002\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\035\uffee\001\002\000\016\007\006\010" +
    "\011\034\012\047\010\050\007\051\004\001\002\000\016" +
    "\007\006\010\011\034\012\047\010\050\007\051\004\001" +
    "\002\000\016\007\006\010\011\034\012\047\010\050\007" +
    "\051\004\001\002\000\016\007\006\010\011\034\012\047" +
    "\010\050\007\051\004\001\002\000\016\007\006\010\011" +
    "\034\012\047\010\050\007\051\004\001\002\000\016\007" +
    "\006\010\011\034\012\047\010\050\007\051\004\001\002" +
    "\000\016\007\006\010\011\034\012\047\010\050\007\051" +
    "\004\001\002\000\016\007\006\010\011\034\012\047\010" +
    "\050\007\051\004\001\002\000\016\007\006\010\011\034" +
    "\012\047\010\050\007\051\004\001\002\000\016\007\006" +
    "\010\011\034\012\047\010\050\007\051\004\001\002\000" +
    "\016\007\006\010\011\034\012\047\010\050\007\051\004" +
    "\001\002\000\016\007\006\010\011\034\012\047\010\050" +
    "\007\051\004\001\002\000\036\002\ufff7\011\024\012\020" +
    "\013\023\014\027\015\021\016\026\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\035\ufff7\001\002\000\036" +
    "\002\ufff4\011\024\012\020\013\023\014\027\015\021\016" +
    "\026\017\022\020\031\021\017\022\025\023\ufff4\024\ufff4" +
    "\035\ufff4\001\002\000\036\002\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\035\ufffb\001\002\000\036\002" +
    "\ufffa\011\024\012\020\013\023\014\027\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\035" +
    "\ufffa\001\002\000\036\002\ufff6\011\024\012\020\013\023" +
    "\014\027\015\021\016\026\017\022\020\031\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\035\ufff6\001\002\000\036\002\ufffe" +
    "\011\ufffe\012\ufffe\013\023\014\027\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\035\ufffe" +
    "\001\002\000\036\002\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\035\ufffc\001\002\000\036\002\ufff8\011" +
    "\024\012\020\013\023\014\027\015\021\016\026\017\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\035\ufff8\001" +
    "\002\000\036\002\ufff9\011\024\012\020\013\023\014\027" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\035\ufff9\001\002\000\036\002\ufffd\011\ufffd" +
    "\012\ufffd\013\023\014\027\015\ufffd\016\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\035\ufffd\001\002" +
    "\000\036\002\ufff5\011\024\012\020\013\023\014\027\015" +
    "\021\016\026\017\022\020\031\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\035\ufff5\001\002\000\036\002\ufff3\011\024\012" +
    "\020\013\023\014\027\015\021\016\026\017\022\020\031" +
    "\021\017\022\025\023\ufff3\024\ufff3\035\ufff3\001\002\000" +
    "\034\011\024\012\020\013\023\014\027\015\021\016\026" +
    "\017\022\020\031\021\017\022\025\023\016\024\030\035" +
    "\047\001\002\000\036\002\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\035\ufff2\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\012\002\004\003\014\004\012\005\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\014\004\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\014\004\044\001" +
    "\001\000\006\003\014\004\043\001\001\000\006\003\014" +
    "\004\042\001\001\000\006\003\014\004\041\001\001\000" +
    "\006\003\014\004\040\001\001\000\006\003\014\004\037" +
    "\001\001\000\006\003\014\004\036\001\001\000\006\003" +
    "\014\004\035\001\001\000\006\003\014\004\034\001\001" +
    "\000\006\003\014\004\033\001\001\000\006\003\014\004" +
    "\032\001\001\000\006\003\014\004\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser3$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser3$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser3$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser2 mp = null;

	// Connect this parser to a scanner!
	public parser3(Lexer2 lex, ManejadorParser2 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser3$actions {
  private final parser3 parser;

  /** Constructor */
  CUP$parser3$actions(parser3 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action_part00000000(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser3$result;

      /* select the action based on the action number */
      switch (CUP$parser3$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		RESULT = start_val;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser3$parser.done_parsing();
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= operaciones 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		mp.setVariableValue(e);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operaciones ::= operacion 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = e;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operaciones",3, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operacion ::= operacion MAS operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionAritmetica(e1, e3, 1);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operacion ::= operacion MENOS operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionAritmetica(e1, e3, 2);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacion ::= operacion MULTIPLICACION operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionAritmetica(e1, e3, 3);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacion ::= operacion DIVISION operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionAritmetica(e1, e3, 4);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= operacion MENOR_QUE operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 1);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= operacion MAYOR_QUE operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 2);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion ::= operacion MAYOR_IGUAL operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 3);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= operacion MENOR_IGUAL operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 4);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= operacion IGUAL_QUE operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 5);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operacion ::= operacion DIFERENTE_QUE operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionRelacional(e1, e3, 6);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operacion ::= operacion OR operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionLogica(e1, e3, 1);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operacion ::= operacion AND operacion 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		Variable e1 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Variable e3 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getOperacionLogica(e1, e3, 2);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operacion ::= PAR_AB operacion PAR_CE 
            {
              Variable RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-1)).right;
		Variable e2 = (Variable)((java_cup.runtime.Symbol) CUP$parser3$stack.elementAt(CUP$parser3$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = e2;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.elementAt(CUP$parser3$top-2)), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operacion ::= NUMERO 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.setNumero(e);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operacion ::= TEXTO 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.setVariable(e, 1);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= VARIABLE 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.getVariable(e);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= booleano 
            {
              Variable RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = mp.setBoolean(e);
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("operacion",2, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // booleano ::= TRUE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = 1;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("booleano",1, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // booleano ::= FALSE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser3$stack.peek()).value;
		RESULT = 2;
              CUP$parser3$result = parser.getSymbolFactory().newSymbol("booleano",1, ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser3$stack.peek()), RESULT);
            }
          return CUP$parser3$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser3$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser3$do_action(
    int                        CUP$parser3$act_num,
    java_cup.runtime.lr_parser CUP$parser3$parser,
    java.util.Stack            CUP$parser3$stack,
    int                        CUP$parser3$top)
    throws java.lang.Exception
    {
              return CUP$parser3$do_action_part00000000(
                               CUP$parser3$act_num,
                               CUP$parser3$parser,
                               CUP$parser3$stack,
                               CUP$parser3$top);
    }
}

}
