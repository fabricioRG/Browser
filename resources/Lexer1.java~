/* The following code was generated by JFlex 1.6.1 */

 package browser.backend.analizadores;

import java_cup.runtime.*;
import static browser.backend.analizadores.sym1.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico1.lex</tt>
 */
public class Lexer1 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\57\1\56"+
    "\1\62\1\57\1\64\1\66\1\0\1\57\1\57\1\60\1\57\1\57"+
    "\1\57\1\57\1\53\1\6\1\63\10\7\1\57\1\61\1\54\1\65"+
    "\1\55\1\57\1\0\1\10\1\12\1\13\1\15\1\17\1\5\1\21"+
    "\1\23\1\24\1\26\1\27\1\30\1\32\1\33\1\35\1\37\1\40"+
    "\1\41\1\42\1\43\1\45\1\47\1\50\1\51\1\52\1\4\1\57"+
    "\1\0\1\57\1\0\1\57\1\0\1\11\1\12\1\14\1\16\1\20"+
    "\1\5\1\22\1\23\1\25\1\26\1\27\1\31\1\32\1\34\1\36"+
    "\1\37\1\40\1\41\1\42\1\44\1\46\1\47\1\50\1\51\1\52"+
    "\1\4\1\57\1\0\1\57\43\0\1\57\35\0\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff50\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\13\3\1\1\1\4\1\3\1\5"+
    "\1\1\14\3\1\0\1\6\7\0\1\7\5\0\25\3"+
    "\1\10\2\3\11\0\14\3\4\0\1\11\2\0\1\12"+
    "\1\0\1\13\2\0\1\14\3\0\1\15\1\16\14\0"+
    "\2\10\3\3\1\17\1\0\1\3\1\20\1\21\23\3"+
    "\1\0\1\3\1\10\1\22\11\0\1\23\3\3\1\24"+
    "\1\25\1\26\1\27\1\3\1\30\1\31\1\3\4\0"+
    "\1\32\3\0\1\33\6\0\1\34\2\0\1\35\3\0"+
    "\1\36\2\0\1\37\4\0\1\40\3\3\1\41\26\3"+
    "\2\42\2\0\1\43\1\0\1\44\4\0\1\45\1\3"+
    "\1\46\1\47\1\50\1\51\2\0\1\52\5\0\1\53"+
    "\1\54\11\0\1\55\4\0\1\56\22\3\1\57\6\3"+
    "\7\0\1\3\3\0\1\60\1\61\1\62\13\0\1\63"+
    "\1\64\1\0\3\3\1\65\1\3\1\66\2\3\1\67"+
    "\1\70\2\3\1\71\1\72\1\3\1\73\5\3\1\74"+
    "\2\3\7\0\1\75\1\76\3\0\1\77\1\100\2\0"+
    "\1\101\1\0\1\102\1\103\1\104\2\0\3\3\1\105"+
    "\2\3\1\106\2\3\1\107\1\3\1\110\2\3\1\111"+
    "\1\3\10\0\1\112\1\113\1\114\3\0\1\115\1\116"+
    "\2\3\1\117\1\120\1\3\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134"+
    "\2\0\1\135\1\136\1\137\1\3\2\0\1\3\2\0"+
    "\1\140\1\141\1\0\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\67\0\u0339\0\67\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604"+
    "\0\u063b\0\67\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\67\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0906\0\u0d89\0\u0dc0\0\u0df7"+
    "\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f"+
    "\0\67\0\u1356\0\u138d\0\67\0\u13c4\0\67\0\u13fb\0\u1432"+
    "\0\67\0\u1469\0\u14a0\0\u14d7\0\67\0\67\0\u150e\0\u1545"+
    "\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\67\0\245\0\u17a2\0\u17d9\0\u1810\0\245"+
    "\0\u1847\0\u187e\0\245\0\245\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d01\0\245\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\245\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\245\0\245\0\245\0\245\0\u1fcc\0\245\0\245\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\67\0\u2116\0\u214d\0\u2184"+
    "\0\67\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\67"+
    "\0\u2305\0\u233c\0\67\0\u2373\0\u23aa\0\u23e1\0\67\0\u2418"+
    "\0\u244f\0\67\0\u2486\0\u24bd\0\u24f4\0\u252b\0\67\0\u2562"+
    "\0\u2599\0\u25d0\0\67\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3"+
    "\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\67\0\245\0\u2ac1\0\u2af8\0\67\0\u2b2f\0\67"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\245\0\u2c42\0\245\0\245"+
    "\0\245\0\67\0\u2c79\0\u2cb0\0\67\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\67\0\67\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\67\0\u2fe9\0\u3020"+
    "\0\u3057\0\u308e\0\67\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\245\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692"+
    "\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\67"+
    "\0\67\0\67\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d"+
    "\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\67\0\67\0\u3aa7"+
    "\0\u3ade\0\u3b15\0\u3b4c\0\245\0\u3b83\0\245\0\u3bba\0\u3bf1"+
    "\0\245\0\245\0\u3c28\0\u3c5f\0\245\0\245\0\u3c96\0\245"+
    "\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\245\0\u3de0\0\u3e17"+
    "\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\245"+
    "\0\67\0\u3fcf\0\u4006\0\u403d\0\67\0\67\0\u4074\0\u40ab"+
    "\0\67\0\u40e2\0\67\0\67\0\67\0\u4119\0\u4150\0\u4187"+
    "\0\u41be\0\u41f5\0\245\0\u422c\0\u4263\0\245\0\u429a\0\u42d1"+
    "\0\245\0\u4308\0\245\0\u433f\0\u4376\0\245\0\u43ad\0\u43e4"+
    "\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\67"+
    "\0\67\0\67\0\u459c\0\u45d3\0\u460a\0\67\0\245\0\u4641"+
    "\0\u4678\0\245\0\245\0\u46af\0\245\0\245\0\245\0\245"+
    "\0\245\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u46e6\0\u471d\0\67\0\67\0\245\0\u4754\0\u478b\0\u47c2"+
    "\0\u47f9\0\u4830\0\u4867\0\245\0\67\0\u489e\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\2\5\2\7\1\10"+
    "\2\11\6\5\1\12\4\5\2\13\1\5\2\14\5\5"+
    "\1\15\2\16\3\5\1\17\3\5\1\20\1\21\1\22"+
    "\5\5\1\2\1\23\1\24\71\0\1\4\70\0\50\5"+
    "\2\0\6\5\7\0\4\5\2\25\42\5\2\0\6\5"+
    "\7\0\24\5\2\26\22\5\2\0\6\5\7\0\15\5"+
    "\2\27\31\5\2\0\6\5\7\0\31\5\2\30\15\5"+
    "\2\0\6\5\7\0\35\5\1\31\12\5\2\0\6\5"+
    "\7\0\20\5\2\32\26\5\2\0\6\5\7\0\4\5"+
    "\2\33\42\5\2\0\6\5\7\0\20\5\2\34\15\5"+
    "\2\35\7\5\2\0\6\5\7\0\13\5\2\36\31\5"+
    "\1\37\1\5\2\0\6\5\7\0\20\5\2\40\26\5"+
    "\2\0\6\5\10\0\1\41\2\0\2\42\1\43\2\44"+
    "\6\0\1\45\2\46\2\0\2\47\1\0\2\50\2\51"+
    "\1\52\2\0\1\53\2\54\2\55\4\0\1\56\13\0"+
    "\4\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\2\67\2\70\2\62\2\71\3\60\1\72\1\60\2\73"+
    "\1\74\2\75\2\76\1\77\1\60\1\100\1\101\2\102"+
    "\3\60\1\103\1\60\1\104\1\60\2\57\1\105\1\60"+
    "\1\5\1\60\1\106\1\107\3\57\11\0\1\110\6\0"+
    "\1\111\1\0\1\112\2\0\1\113\3\0\1\114\1\0"+
    "\1\115\1\116\1\0\1\117\7\0\1\120\24\0\7\5"+
    "\2\121\37\5\2\0\6\5\7\0\20\5\2\122\26\5"+
    "\2\0\6\5\7\0\7\5\2\123\37\5\2\0\6\5"+
    "\7\0\24\5\2\124\22\5\2\0\6\5\7\0\13\5"+
    "\2\125\33\5\2\0\6\5\7\0\27\5\2\126\17\5"+
    "\2\0\6\5\7\0\26\5\1\127\21\5\2\0\6\5"+
    "\7\0\1\130\47\5\2\0\6\5\7\0\4\5\2\131"+
    "\42\5\2\0\6\5\7\0\45\5\1\132\2\5\2\0"+
    "\6\5\7\0\33\5\1\133\14\5\2\0\6\5\7\0"+
    "\11\5\2\134\35\5\2\0\6\5\40\0\2\135\60\0"+
    "\2\136\3\0\2\137\2\0\1\140\13\0\1\141\30\0"+
    "\2\142\65\0\2\143\20\0\1\144\1\0\2\145\77\0"+
    "\1\146\35\0\2\147\76\0\2\150\60\0\2\151\100\0"+
    "\2\152\2\153\44\0\2\154\71\0\2\155\23\0\1\156"+
    "\16\0\1\157\2\0\2\160\1\161\2\162\6\0\1\163"+
    "\2\164\5\0\2\165\2\166\1\167\2\0\1\170\2\171"+
    "\2\172\20\0\56\57\1\173\14\57\50\60\2\57\1\174"+
    "\5\60\7\57\1\60\14\175\24\60\2\176\5\60\2\57"+
    "\1\174\4\60\1\175\7\57\1\60\14\175\33\60\2\57"+
    "\1\174\4\60\1\175\7\57\1\60\1\175\2\177\11\175"+
    "\33\60\2\57\1\200\4\60\1\177\1\201\6\57\1\60"+
    "\14\175\17\60\1\202\13\60\2\57\1\203\4\60\1\175"+
    "\7\57\1\60\14\175\17\60\1\202\13\60\2\57\1\204"+
    "\4\60\1\175\7\57\1\60\14\175\7\60\2\205\22\60"+
    "\2\57\1\174\4\60\1\175\7\57\1\60\12\175\2\206"+
    "\3\60\2\207\26\60\2\57\1\174\4\60\1\175\7\57"+
    "\1\60\14\175\3\60\2\210\26\60\2\57\1\174\4\60"+
    "\1\175\7\57\35\60\1\211\12\60\2\57\1\174\5\60"+
    "\7\57\41\60\2\212\5\60\2\57\1\174\5\60\7\57"+
    "\13\60\2\213\3\60\2\214\26\60\2\57\1\174\5\60"+
    "\7\57\4\60\2\215\42\60\2\57\1\174\5\60\7\57"+
    "\4\60\2\216\42\60\2\57\1\174\5\60\7\57\24\60"+
    "\2\217\22\60\2\57\1\174\5\60\7\57\41\60\2\220"+
    "\5\60\2\57\1\174\5\60\7\57\13\60\2\221\3\60"+
    "\2\222\26\60\2\57\1\174\5\60\7\57\20\60\2\223"+
    "\12\60\1\224\13\60\2\57\1\174\5\60\7\57\13\60"+
    "\2\225\33\60\2\57\1\174\5\60\7\57\17\60\1\226"+
    "\30\60\2\57\1\174\5\60\7\57\13\60\2\227\33\60"+
    "\2\57\1\174\5\60\3\57\4\230\50\231\2\230\1\232"+
    "\1\231\1\60\3\231\3\230\4\57\1\60\1\175\2\177"+
    "\11\175\33\60\2\57\1\233\4\60\1\177\1\201\2\57"+
    "\11\0\1\234\66\0\1\235\121\0\1\236\33\0\1\237"+
    "\121\0\1\240\66\0\1\241\66\0\1\242\33\0\1\243"+
    "\66\0\1\244\61\0\13\5\2\245\33\5\2\0\6\5"+
    "\7\0\15\5\2\246\31\5\2\0\6\5\7\0\31\5"+
    "\2\247\15\5\2\0\6\5\7\0\31\5\2\250\15\5"+
    "\2\0\6\5\7\0\1\5\1\251\46\5\2\0\6\5"+
    "\7\0\23\5\1\252\24\5\2\0\6\5\7\0\13\5"+
    "\2\253\33\5\2\0\6\5\7\0\13\5\2\254\33\5"+
    "\2\0\6\5\7\0\35\5\1\255\12\5\2\0\6\5"+
    "\7\0\37\5\2\256\7\5\2\0\6\5\7\0\13\5"+
    "\2\257\33\5\2\0\6\5\7\0\37\5\2\260\7\5"+
    "\2\0\6\5\36\0\2\261\56\0\2\262\7\0\2\263"+
    "\45\0\2\264\125\0\1\265\44\0\2\266\42\0\2\267"+
    "\107\0\1\270\111\0\1\271\23\0\1\272\115\0\1\273"+
    "\37\0\1\274\24\0\1\275\72\0\2\276\57\0\2\277"+
    "\105\0\1\300\41\0\2\301\3\0\2\302\16\0\1\303"+
    "\30\0\2\304\65\0\2\305\22\0\2\306\77\0\1\307"+
    "\46\0\2\310\60\0\2\311\112\0\1\312\54\0\2\313"+
    "\2\314\44\0\2\315\71\0\2\316\23\0\1\317\11\0"+
    "\4\57\1\60\14\320\33\60\2\57\1\174\4\60\1\320"+
    "\7\57\7\60\2\321\37\60\2\57\1\174\5\60\7\57"+
    "\1\60\1\320\2\322\11\320\33\60\2\57\1\200\4\60"+
    "\1\322\1\201\60\57\1\323\14\57\41\60\2\324\5\60"+
    "\2\57\1\174\5\60\7\57\4\60\2\325\33\60\2\326"+
    "\5\60\2\57\1\174\5\60\7\57\1\60\14\320\12\60"+
    "\2\327\17\60\2\57\1\174\4\60\1\320\7\57\35\60"+
    "\1\330\12\60\2\57\1\174\5\60\7\57\36\60\1\331"+
    "\11\60\2\57\1\174\5\60\7\57\4\60\2\332\5\60"+
    "\2\333\33\60\2\57\1\174\5\60\7\57\36\60\1\334"+
    "\11\60\2\57\1\174\5\60\7\57\1\60\1\335\46\60"+
    "\2\57\1\174\5\60\7\57\26\60\1\336\21\60\2\57"+
    "\1\174\5\60\7\57\35\60\1\337\12\60\2\57\1\174"+
    "\5\60\7\57\43\60\1\340\4\60\2\57\1\174\5\60"+
    "\7\57\20\60\2\341\26\60\2\57\1\174\5\60\7\57"+
    "\35\60\1\342\12\60\2\57\1\174\5\60\7\57\11\60"+
    "\2\343\35\60\2\57\1\174\5\60\7\57\15\60\2\344"+
    "\31\60\2\57\1\174\5\60\7\57\24\60\2\345\22\60"+
    "\2\57\1\174\5\60\7\57\41\60\2\346\5\60\2\57"+
    "\1\174\5\60\7\57\4\60\2\347\42\60\2\57\1\174"+
    "\5\60\7\57\20\60\2\350\26\60\2\57\1\174\5\60"+
    "\7\57\24\60\2\351\22\60\2\57\1\174\5\60\3\57"+
    "\56\230\1\352\14\230\50\231\2\230\1\353\5\231\3\230"+
    "\14\0\1\354\66\0\1\355\133\0\1\356\21\0\1\357"+
    "\133\0\1\360\32\0\1\361\66\0\1\362\55\0\1\363"+
    "\66\0\1\364\56\0\27\5\2\365\17\5\2\0\6\5"+
    "\7\0\24\5\2\366\22\5\2\0\6\5\7\0\35\5"+
    "\1\367\12\5\2\0\6\5\7\0\37\5\2\370\7\5"+
    "\2\0\6\5\7\0\17\5\1\371\30\5\2\0\6\5"+
    "\46\0\2\372\55\0\2\373\45\0\2\374\124\0\1\375"+
    "\57\0\2\376\37\0\2\377\100\0\2\u0100\76\0\1\u0101"+
    "\51\0\2\u0102\116\0\1\u0103\66\0\1\u0104\41\0\2\u0105"+
    "\70\0\2\u0106\56\0\2\u0107\7\0\2\u0108\45\0\2\u0109"+
    "\103\0\2\u010a\42\0\2\u010b\107\0\1\u010c\46\0\1\u010d"+
    "\131\0\1\u010e\52\0\1\u010f\37\0\1\u0110\24\0\1\u0111"+
    "\72\0\2\u0112\77\0\1\u0113\11\0\4\57\1\60\14\u0114"+
    "\33\60\2\57\1\174\4\60\1\u0114\7\57\17\60\1\u0115"+
    "\30\60\2\57\1\174\5\60\7\57\1\60\1\u0114\2\u0116"+
    "\11\u0114\33\60\2\57\1\200\4\60\1\u0116\1\201\6\57"+
    "\4\60\2\u0117\42\60\2\57\1\174\5\60\7\57\7\60"+
    "\2\u0118\37\60\2\57\1\174\5\60\7\57\13\60\2\u0119"+
    "\33\60\2\57\1\174\5\60\7\57\37\60\2\u011a\7\60"+
    "\2\57\1\174\5\60\7\57\7\60\2\u011b\37\60\2\57"+
    "\1\174\5\60\7\57\7\60\2\u011c\37\60\2\57\1\174"+
    "\5\60\7\57\46\60\1\u011d\1\60\2\57\1\174\5\60"+
    "\7\57\13\60\2\u011e\33\60\2\57\1\174\5\60\7\57"+
    "\37\60\2\u011f\7\60\2\57\1\174\5\60\7\57\37\60"+
    "\2\u0120\7\60\2\57\1\174\5\60\7\57\13\60\2\u0121"+
    "\33\60\2\57\1\174\5\60\7\57\31\60\2\u0122\15\60"+
    "\2\57\1\174\5\60\7\57\46\60\1\u0123\1\60\2\57"+
    "\1\174\5\60\7\57\43\60\1\u0124\4\60\2\57\1\174"+
    "\5\60\7\57\33\60\1\u0125\14\60\2\57\1\174\5\60"+
    "\7\57\50\60\2\57\1\u0126\5\60\7\57\17\60\1\u0127"+
    "\30\60\2\57\1\174\5\60\7\57\43\60\1\u0128\4\60"+
    "\2\57\1\174\5\60\7\57\4\60\2\u0129\42\60\2\57"+
    "\1\174\5\60\7\57\24\60\2\u012a\22\60\2\57\1\174"+
    "\5\60\7\57\37\60\2\u012b\7\60\2\57\1\174\5\60"+
    "\7\57\24\60\2\u012c\22\60\2\57\1\174\5\60\3\57"+
    "\46\0\1\u012d\66\0\1\u012e\66\0\1\u012f\51\0\1\u0130"+
    "\66\0\1\u0131\103\0\1\u0132\66\0\1\u0133\24\0\31\5"+
    "\2\u0134\15\5\2\0\6\5\32\0\1\u0135\66\0\1\u0136"+
    "\56\0\2\u0137\123\0\1\u0138\66\0\1\u0139\66\0\1\u013a"+
    "\40\0\1\u013b\56\0\2\u013c\111\0\2\u013d\55\0\2\u013e"+
    "\45\0\2\u013f\124\0\1\u0140\57\0\2\u0141\37\0\2\u0142"+
    "\100\0\2\u0143\76\0\1\u0144\51\0\2\u0145\116\0\1\u0146"+
    "\66\0\1\u0147\41\0\2\u0148\35\0\4\57\1\60\14\u0149"+
    "\33\60\2\57\1\174\4\60\1\u0149\7\57\36\60\1\u014a"+
    "\11\60\2\57\1\174\5\60\7\57\1\60\1\u0149\2\u014b"+
    "\11\u0149\33\60\2\57\1\200\4\60\1\u014b\1\201\6\57"+
    "\50\60\2\57\1\u014c\5\60\7\57\23\60\1\u014d\24\60"+
    "\2\57\1\174\5\60\7\57\50\60\2\57\1\u014e\5\60"+
    "\7\57\13\60\2\u014f\33\60\2\57\1\174\5\60\7\57"+
    "\24\60\2\u0150\22\60\2\57\1\174\5\60\7\57\50\60"+
    "\2\57\1\u0151\5\60\7\57\50\60\2\57\1\u0152\5\60"+
    "\7\57\27\60\2\u0153\17\60\2\57\1\174\5\60\7\57"+
    "\20\60\2\u0154\26\60\2\57\1\174\5\60\7\57\50\60"+
    "\2\57\1\u0155\5\60\7\57\50\60\2\57\1\u0156\5\60"+
    "\7\57\31\60\2\u0157\15\60\2\57\1\174\5\60\7\57"+
    "\50\60\2\57\1\u0158\5\60\7\57\13\60\2\u0159\33\60"+
    "\2\57\1\174\5\60\7\57\24\60\2\u015a\22\60\2\57"+
    "\1\174\5\60\7\57\37\60\2\u015b\7\60\2\57\1\174"+
    "\5\60\7\57\13\60\2\u015c\33\60\2\57\1\174\5\60"+
    "\7\57\35\60\1\u015d\12\60\2\57\1\174\5\60\7\57"+
    "\50\60\2\57\1\u015e\5\60\7\57\13\60\2\u015f\33\60"+
    "\2\57\1\174\5\60\7\57\31\60\2\u0160\15\60\2\57"+
    "\1\174\5\60\3\57\44\0\1\u0161\66\0\1\u0162\66\0"+
    "\1\u0163\40\0\1\u0164\66\0\1\u0165\114\0\1\u0166\66\0"+
    "\1\u0167\26\0\35\5\1\u0168\12\5\2\0\6\5\60\0"+
    "\1\u0169\51\0\1\u016a\67\0\1\u016b\44\0\2\u016c\123\0"+
    "\1\u016d\66\0\1\u016e\40\0\1\u016f\66\0\1\u0170\114\0"+
    "\1\u0171\30\0\2\u0172\123\0\1\u0173\66\0\1\u0174\66\0"+
    "\1\u0175\40\0\1\u0176\56\0\2\u0177\46\0\4\57\1\60"+
    "\14\u0178\33\60\2\57\1\174\4\60\1\u0178\7\57\20\60"+
    "\2\u0179\26\60\2\57\1\174\5\60\7\57\1\60\1\u0178"+
    "\2\u017a\11\u0178\33\60\2\57\1\200\4\60\1\u017a\1\201"+
    "\6\57\50\60\2\57\1\u017b\5\60\7\57\35\60\1\u017c"+
    "\12\60\2\57\1\174\5\60\7\57\13\60\2\u017d\33\60"+
    "\2\57\1\174\5\60\7\57\50\60\2\57\1\u017e\5\60"+
    "\7\57\1\60\1\u017f\46\60\2\57\1\174\5\60\7\57"+
    "\27\60\2\u0180\17\60\2\57\1\174\5\60\7\57\50\60"+
    "\2\57\1\u0181\5\60\7\57\13\60\2\u0182\33\60\2\57"+
    "\1\174\5\60\7\57\50\60\2\57\1\u0183\5\60\7\57"+
    "\35\60\1\u0184\12\60\2\57\1\174\5\60\7\57\13\60"+
    "\2\u0185\33\60\2\57\1\174\5\60\7\57\50\60\2\57"+
    "\1\u0186\5\60\7\57\44\60\1\u0187\3\60\2\57\1\174"+
    "\5\60\3\57\20\0\1\u0188\66\0\1\u0189\66\0\1\u018a"+
    "\66\0\1\u018b\66\0\1\u018c\66\0\1\u018d\66\0\1\u018e"+
    "\113\0\2\u018f\75\0\1\u0190\66\0\1\u0191\66\0\1\u0192"+
    "\51\0\1\u0193\67\0\1\u0194\44\0\2\u0195\123\0\1\u0196"+
    "\11\0\4\57\50\60\2\57\1\u0197\5\60\7\57\4\60"+
    "\2\u0198\42\60\2\57\1\174\5\60\7\57\2\60\2\u0199"+
    "\44\60\2\57\1\u0197\4\60\1\u0199\1\201\6\57\50\60"+
    "\2\57\1\u019a\5\60\7\57\50\60\2\57\1\u019b\5\60"+
    "\7\57\20\60\2\u019c\26\60\2\57\1\174\5\60\7\57"+
    "\50\60\2\57\1\u019d\5\60\7\57\50\60\2\57\1\u019e"+
    "\5\60\7\57\50\60\2\57\1\u019f\5\60\7\57\50\60"+
    "\2\57\1\u01a0\5\60\7\57\50\60\2\57\1\u01a1\5\60"+
    "\3\57\61\0\1\u01a2\66\0\1\u01a3\66\0\1\u01a4\66\0"+
    "\1\u01a5\66\0\1\u01a6\66\0\1\u01a7\66\0\1\u01a8\42\0"+
    "\2\u01a9\75\0\2\u01aa\75\0\1\u01ab\66\0\1\u01ac\11\0"+
    "\4\57\50\60\2\57\1\u01ad\5\60\7\57\2\60\2\u0199"+
    "\44\60\2\57\1\200\4\60\1\u0199\1\201\6\57\13\60"+
    "\2\u01ae\33\60\2\57\1\174\5\60\3\57\43\0\2\u01af"+
    "\57\0\2\u01b0\30\0\4\57\11\60\2\u01b1\35\60\2\57"+
    "\1\174\5\60\3\57\17\0\2\u01b2\111\0\2\u01b3\22\0"+
    "\4\57\50\60\2\57\1\u01b4\5\60\3\57\55\0\1\u01b5"+
    "\30\0\2\u01b6\123\0\1\u01b7\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\14\1\1\11\1\1\1\11"+
    "\15\1\1\0\1\11\7\0\1\11\5\0\30\1\11\0"+
    "\14\1\4\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\2\11\14\0\1\11\5\1\1\0\26\1"+
    "\1\0\3\1\11\0\14\1\4\0\1\11\3\0\1\11"+
    "\6\0\1\11\2\0\1\11\3\0\1\11\2\0\1\11"+
    "\4\0\1\11\3\1\1\11\26\1\1\11\1\1\2\0"+
    "\1\11\1\0\1\11\4\0\5\1\1\11\2\0\1\11"+
    "\5\0\2\11\11\0\1\11\4\0\1\11\31\1\7\0"+
    "\1\1\3\0\3\11\13\0\2\11\1\0\30\1\7\0"+
    "\1\1\1\11\3\0\2\11\2\0\1\11\1\0\3\11"+
    "\2\0\20\1\10\0\3\11\3\0\1\11\13\1\7\11"+
    "\2\0\2\11\2\1\2\0\1\1\2\0\1\1\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Simbolo invalido <"+ yytext()+">");
            }
          case 99: break;
          case 2: 
            { /*Nothing to do*/
            }
          case 100: break;
          case 3: 
            { return symbol(TEXTO_PLANO, yytext());
            }
          case 101: break;
          case 4: 
            { return symbol(CIERRE, yytext());
            }
          case 102: break;
          case 5: 
            { return symbol(SIGNO_IGUAL, yytext());
            }
          case 103: break;
          case 6: 
            { return symbol(ENLACE_AB, yytext());
            }
          case 104: break;
          case 7: 
            { return symbol(PARRAFO_AB, yytext());
            }
          case 105: break;
          case 8: 
            { return symbol(PARAMETRO, yytext());
            }
          case 106: break;
          case 9: 
            { return symbol(NEGRILLA_AB, yytext());
            }
          case 107: break;
          case 10: 
            { return symbol(LINE_HOR_AB, yytext());
            }
          case 108: break;
          case 11: 
            { return symbol(ITALICA_AB, yytext());
            }
          case 109: break;
          case 12: 
            { return symbol(LIST_ORD_AB, yytext());
            }
          case 110: break;
          case 13: 
            { return symbol(LIST_DES_AB, yytext());
            }
          case 111: break;
          case 14: 
            { return symbol(SUBRAYADO_AB, yytext());
            }
          case 112: break;
          case 15: 
            { return symbol(TAMANO, yytext());
            }
          case 113: break;
          case 16: 
            { return symbol(MAY, yytext());
            }
          case 114: break;
          case 17: 
            { return symbol(MIN, yytext());
            }
          case 115: break;
          case 18: 
            { return symbol(ENTERO_UNO, yytext());
            }
          case 116: break;
          case 19: 
            { return symbol(FACE, yytext());
            }
          case 117: break;
          case 20: 
            { return symbol(HREF, yytext());
            }
          case 118: break;
          case 21: 
            { return symbol(LINK, yytext());
            }
          case 119: break;
          case 22: 
            { return symbol(NAME, yytext());
            }
          case 120: break;
          case 23: 
            { return symbol(SIZE, yytext());
            }
          case 121: break;
          case 24: 
            { return symbol(TEXT, yytext());
            }
          case 122: break;
          case 25: 
            { return symbol(TYPE, yytext());
            }
          case 123: break;
          case 26: 
            { return symbol(SALTO_LINEA, yytext());
            }
          case 124: break;
          case 27: 
            { return symbol(ITEM, yytext());
            }
          case 125: break;
          case 28: 
            { return symbol(ENLACE_CE, yytext());
            }
          case 126: break;
          case 29: 
            { return symbol(NEGRILLA_CE, yytext());
            }
          case 127: break;
          case 30: 
            { return symbol(ITALICA_CE, yytext());
            }
          case 128: break;
          case 31: 
            { return symbol(PARRAFO_CE, yytext());
            }
          case 129: break;
          case 32: 
            { return symbol(SUBRAYADO_CE, yytext());
            }
          case 130: break;
          case 33: 
            { return symbol(ANCHO_PANTALLA, yytext());
            }
          case 131: break;
          case 34: 
            { return symbol(ENLACE, yytext());
            }
          case 132: break;
          case 35: 
            { return symbol(MAYOR, yytext());
            }
          case 133: break;
          case 36: 
            { return symbol(MENOR, yytext());
            }
          case 134: break;
          case 37: 
            { return symbol(ALIGN, yytext());
            }
          case 135: break;
          case 38: 
            { return symbol(COLOR, yytext());
            }
          case 136: break;
          case 39: 
            { return symbol(START, yytext());
            }
          case 137: break;
          case 40: 
            { return symbol(WIDTH, yytext());
            }
          case 138: break;
          case 41: 
            { return symbol(FONT_AB, yytext());
            }
          case 139: break;
          case 42: 
            { return symbol(BODY_AB, yytext());
            }
          case 140: break;
          case 43: 
            { return symbol(SUBINDICE_AB, yytext());
            }
          case 141: break;
          case 44: 
            { return symbol(SUPERINDICE_AB, yytext());
            }
          case 142: break;
          case 45: 
            { return symbol(LIST_ORD_CE, yytext());
            }
          case 143: break;
          case 46: 
            { return symbol(LIST_DES_CE, yytext());
            }
          case 144: break;
          case 47: 
            { return symbol(RED, yytext());
            }
          case 145: break;
          case 48: 
            { return symbol(HEAD_AB, yytext());
            }
          case 146: break;
          case 49: 
            { return symbol(HTML_AB, yytext());
            }
          case 147: break;
          case 50: 
            { return symbol(NOBR_AB, yytext());
            }
          case 148: break;
          case 51: 
            { return symbol(SUBINDICE_CE, yytext());
            }
          case 149: break;
          case 52: 
            { return symbol(SUPERINDICE_CE, yytext());
            }
          case 150: break;
          case 53: 
            { return symbol(AQUA, yytext());
            }
          case 151: break;
          case 54: 
            { return symbol(BLUE, yytext());
            }
          case 152: break;
          case 55: 
            { return symbol(DISC, yytext());
            }
          case 153: break;
          case 56: 
            { return symbol(GRAY, yytext());
            }
          case 154: break;
          case 57: 
            { return symbol(LEFT, yytext());
            }
          case 155: break;
          case 58: 
            { return symbol(LIME, yytext());
            }
          case 156: break;
          case 59: 
            { return symbol(NAVY, yytext());
            }
          case 157: break;
          case 60: 
            { return symbol(TEAL, yytext());
            }
          case 158: break;
          case 61: 
            { return symbol(BG_COLOR, yytext());
            }
          case 159: break;
          case 62: 
            { return symbol(PARPADEANTE_AB, yytext());
            }
          case 160: break;
          case 63: 
            { return symbol(TITLE_AB, yytext());
            }
          case 161: break;
          case 64: 
            { return symbol(FONT_CE, yytext());
            }
          case 162: break;
          case 65: 
            { return symbol(BODY_CE, yytext());
            }
          case 163: break;
          case 66: 
            { return symbol(HEAD_CE, yytext());
            }
          case 164: break;
          case 67: 
            { return symbol(HTML_CE, yytext());
            }
          case 165: break;
          case 68: 
            { return symbol(NOBR_CE, yytext());
            }
          case 166: break;
          case 69: 
            { return symbol(BLACK, yytext());
            }
          case 167: break;
          case 70: 
            { return symbol(GREEN, yytext());
            }
          case 168: break;
          case 71: 
            { return symbol(OLIVE, yytext());
            }
          case 169: break;
          case 72: 
            { return symbol(RIGHT, yytext());
            }
          case 170: break;
          case 73: 
            { return symbol(WHITE, yytext());
            }
          case 171: break;
          case 74: 
            { return symbol(CENTRADO_AB, yytext());
            }
          case 172: break;
          case 75: 
            { return symbol(TACHADO_AB, yytext());
            }
          case 173: break;
          case 76: 
            { return symbol(PARPADEANTE_CE, yytext());
            }
          case 174: break;
          case 77: 
            { return symbol(TITLE_CE, yytext());
            }
          case 175: break;
          case 78: 
            { return symbol(HEXADECIMAL, yytext());
            }
          case 176: break;
          case 79: 
            { return symbol(CENTER, yytext());
            }
          case 177: break;
          case 80: 
            { return symbol(CIRCLE, yytext());
            }
          case 178: break;
          case 81: 
            { return symbol(MAROON, yytext());
            }
          case 179: break;
          case 82: 
            { return symbol(PURPLE, yytext());
            }
          case 180: break;
          case 83: 
            { return symbol(SILVER, yytext());
            }
          case 181: break;
          case 84: 
            { return symbol(SQUARE, yytext());
            }
          case 182: break;
          case 85: 
            { return symbol(YELLOW, yytext());
            }
          case 183: break;
          case 86: 
            { return symbol(A_TILDE, yytext());
            }
          case 184: break;
          case 87: 
            { return symbol(E_TILDE, yytext());
            }
          case 185: break;
          case 88: 
            { return symbol(I_TILDE, yytext());
            }
          case 186: break;
          case 89: 
            { return symbol(N_TILDE_MAY, yytext());
            }
          case 187: break;
          case 90: 
            { return symbol(N_TILDE_MIN, yytext());
            }
          case 188: break;
          case 91: 
            { return symbol(O_TILDE, yytext());
            }
          case 189: break;
          case 92: 
            { return symbol(U_TILDE, yytext());
            }
          case 190: break;
          case 93: 
            { return symbol(CENTRADO_CE, yytext());
            }
          case 191: break;
          case 94: 
            { return symbol(TACHADO_CE, yytext());
            }
          case 192: break;
          case 95: 
            { return symbol(FUCHSIA, yytext());
            }
          case 193: break;
          case 96: 
            { return symbol(JUSTIFIED, yytext());
            }
          case 194: break;
          case 97: 
            { return symbol(SANGRIA_AB, yytext());
            }
          case 195: break;
          case 98: 
            { return symbol(SANGRIA_CE, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer1 [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer1 scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer1(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
