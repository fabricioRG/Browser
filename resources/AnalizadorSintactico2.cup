package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import browser.backend.objects.*;

parser code {:

	private ManejadorParser2 mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer2 lex, ManejadorParser2 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }

:}

terminal String         INTEGER, BOOLEAN, STRING, TRUE, FALSE, MAS, MENOS;
terminal String 		MULTIPLICACION, DIVISION, MAYOR_QUE, MENOR_QUE;
terminal String 		MAYOR_IGUAL, MENOR_IGUAL, DIFERENTE_QUE, IGUAL_QUE;
terminal String 		AND, OR, IF, THEN, ELSE, WHILE, FOR, TO, PRINT;
terminal String 		PAR_AB, PAR_CE, COR_AB, COR_CE, ASIGNACION, DOS_PUNTOS;
terminal String 		PUNTO_COMA, COMA, END, BEGIN, VAR, NUMERO, VARIABLE, TEXTO;

non terminal String 	main, booleano;
non terminal String 	operacion;
non terminal Operacion 	expresion, condicion;
non terminal Token 		tokens, token1, token2;
non terminal Integer 	tipoVar;
non terminal Elemento 	elemento1, elemento, varDecla, operaciones, condicional;
non terminal Elemento 	cicloFor, cicloWhile, print, asignacion;
non terminal Bloque 	bloque1, bloque2, bloque;



precedence left 		MENOS, MAS;
precedence left 		MULTIPLICACION, DIVISION;
precedence left 		AND, OR;
precedence left 		IGUAL_QUE, DIFERENTE_QUE;
precedence left 		MAYOR_IGUAL, MENOR_IGUAL;
precedence left 		MENOR_QUE, MAYOR_QUE;
precedence left 		MAS, MENOS;
precedence left 		MULTIPLICACION, DIVISION;

start with main;

/* INICIO GRAMATICA DE -----MAIN----- */

main ::= 			elemento1:e {:mp.procesar(e);:}
					;

elemento1 ::= 		elemento1:e1 elemento:e2 {:RESULT = mp.getElemento(e1, e2);:}
					| elemento:e {:RESULT = e;:}
					;

elemento ::= 		varDecla:e {:RESULT = e;:}
					| operaciones:e {:RESULT = e;:}
					| condicional:e {:RESULT = e;:}
					| cicloFor:e {:RESULT = e;:}
					| cicloWhile:e {:RESULT = e;:}
					| print:e {:RESULT = e;:}
					| asignacion:e {:RESULT = e;:}
					;

operaciones ::= 	operacion:e {:RESULT = mp.setOperacion(e);:}
					;

varDecla ::= 		VAR VARIABLE:e1 DOS_PUNTOS tipoVar:e2 PUNTO_COMA {:RESULT = mp.setVariables(e1, e2);:}
					;

tipoVar ::= 		INTEGER {:RESULT = 2;:}
					| BOOLEAN {:RESULT = 3;:}
					| STRING {:RESULT = 1;:}
					;

operacion ::=		operacion:e1 MAS:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MENOS:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MULTIPLICACION:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 DIVISION:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MENOR_QUE:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MAYOR_QUE:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MAYOR_IGUAL:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 MENOR_IGUAL:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 IGUAL_QUE:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 DIFERENTE_QUE:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 OR:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| operacion:e1 AND:e2 operacion:e3 {:RESULT = e1 + e2 + e3;:}
					| PAR_AB:e1 operacion:e2 PAR_CE:e3	{:RESULT = e1 + e2 + e3;:}
					| NUMERO:e {:RESULT = e;:}
					| TEXTO:e {:RESULT = e;:}
					| VARIABLE:e {:RESULT = e;:}
					| booleano:e {:RESULT = e;:}
					;

booleano ::= 		TRUE:e {:RESULT = e;:}
					| FALSE:e {:RESULT = e;:}
					;

condicional ::= 	IF condicion:e1 THEN bloque1:e2 ELSE bloque2:e3 {:RESULT = mp.setCondicional(e1, e2, e3);:}
					;

condicion ::= 		operacion:e {:RESULT = mp.setCondicion(e);:}
					;

bloque1 ::= 		bloque:e {:RESULT = e;:}
					;

bloque2 ::= 		bloque:e {:RESULT = e;:}
					;

bloque ::= 			BEGIN COR_AB elemento1:e COR_CE END PUNTO_COMA {:RESULT = mp.setBloque(e);:}
					| elemento:e {:RESULT = mp.setBloque(e);:}
					;

cicloFor ::= 		FOR VARIABLE:e1 ASIGNACION NUMERO:e2 TO NUMERO:e3 bloque:e4 {:RESULT = mp.setCicloFor(e1, e2, e3, e4);:}
					;

cicloWhile ::= 		WHILE condicion:e1 bloque:e2 {:RESULT = mp.setCicloWhile(e1, e2);:}
					;

print ::= 			PRINT PAR_AB tokens:e PAR_CE PUNTO_COMA {:RESULT = mp.setPrint(e);:}
					;

tokens ::= 			token1:e1 token2:e2 {:RESULT = mp.addToken(e1, e2);:}
					| token2:e {:RESULT = e;:}
					;

token1 ::= 			token1:e1 token2:e2 COMA {:RESULT = mp.addToken(e1, e2);:}
					| token2:e COMA {:RESULT = e;:}
					;

token2 ::= 			TEXTO:e {:RESULT = mp.setToken(e, null);:}
					| VARIABLE:e {:RESULT = mp.setToken(null, e);:}
					;

asignacion ::= 		VARIABLE:e1 ASIGNACION expresion:e2 PUNTO_COMA {:RESULT = mp.setAsignacion(e1, e2);:}
					;

expresion ::= 		operacion:e {:RESULT = mp.setCondicion(e);:}
					; 




