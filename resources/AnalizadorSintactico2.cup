package browser.backend.analizadores;

import java_cup.runtime.*;
import browser.backend.analizadores.*;
import browser.backend.manejadores.*;
import browser.backend.objects.*;

parser code {:

	private ManejadorParser2 mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer2 lex, ManejadorParser2 mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left)+" columna "+(s.right));
        }

:}

terminal String         INTEGER, BOOLEAN, STRING, TRUE, FALSE, MAS, MENOS;
terminal String 		MULTIPLICACION, DIVISION, MAYOR_QUE, MENOR_QUE;
terminal String 		MAYOR_IGUAL, MENOR_IGUAL, DIFERENTE_QUE, IGUAL_QUE;
terminal String 		AND, OR, IF, THEN, ELSE, WHILE, FOR, TO, PRINT;
terminal String 		PAR_AB, PAR_CE, COR_AB, COR_CE, ASIGNACION, DOS_PUNTOS;
terminal String 		PUNTO_COMA, COMA, END, BEGIN, VAR, NUMERO, VARIABLE, TEXTO;

non terminal String 	main, varDecla;
non terminal String 	opAritmetica, opRelacional, opLogica, condicional;
non terminal String 	tipoVar, op1, op2, op3, relacional1, logica1, logica2, condicion;
non terminal String 	tokens, token1, token2, expresion;
non terminal Elemento 	elemento1, elemento;
non terminal Bloque 	bloque1, bloque2, bloque;
non terminal Asignacion asignacion;
non terminal CicloFor 	cicloFor;
non terminal CicloWhile cicloWhile;
non terminal Print 		print;



precedence left 		MENOS, MAS;
precedence left 		MULTIPLICACION, DIVISION;
precedence left 		OR;
precedence left 		AND;

start with main;

/* INICIO GRAMATICA DE -----MAIN----- */

main ::= 			elemento1
					;

elemento1 ::= 		elemento1 elemento
					| elemento
					;

elemento ::= 		varDecla
					| opAritmetica
					| opRelacional
					| opLogica
					| condicional
					| cicloFor
					| cicloWhile
					| print
					| asignacion
					;

varDecla ::= 		VAR VARIABLE DOS_PUNTOS tipoVar PUNTO_COMA
					;

tipoVar ::= 		INTEGER
					| BOOLEAN
					| STRING
					;

opAritmetica ::= 	op1
					;

op1 ::= 			op1 MAS op2
					| op1 MENOS op2
					| op2
					;

op2 ::= 			op2 MULTIPLICACION op3
					| op2 DIVISION op3
					| op3
					;

op3 ::= 			PAR_AB op1 PAR_CE
					| NUMERO
					| VARIABLE
					| TEXTO
					;

opRelacional ::= 	relacional1 MAYOR_QUE relacional1
					| relacional1 MENOR_QUE relacional1
					| relacional1 MAYOR_IGUAL relacional1
					| relacional1 MENOR_IGUAL relacional1
					| relacional1 IGUAL_QUE relacional1
					| relacional1 DIFERENTE_QUE relacional1
					;

relacional1 ::= 	opAritmetica
					;

opLogica ::= 		opLogica OR logica1
					| opLogica AND logica1
					;					

logica1 ::= 		logica1 OR logica2
					| logica1 AND logica2
					| logica2
					;

logica2 ::= 		opRelacional
					| TRUE
					| FALSE
					| VARIABLE
					;

condicional ::= 	IF condicion THEN bloque1 ELSE bloque2
					;

condicion ::= 		opLogica
					| opRelacional
					| TRUE
					| FALSE
					;

bloque1 ::= 		bloque
					;

bloque2 ::= 		bloque
					;

bloque ::= 			BEGIN COR_AB elemento1 COR_CE END PUNTO_COMA
					| elemento
					;

cicloFor ::= 		FOR VARIABLE ASIGNACION NUMERO TO NUMERO bloque
					;

cicloWhile ::= 		WHILE condicion bloque
					;

print ::= 			PRINT PAR_AB tokens PAR_CE PUNTO_COMA
					;

tokens ::= 			token1 token2
					| token2 
					;

token1 ::= 			token1 token2 COMA
					| token2 COMA
					;

token2 ::= 			TEXTO
					| VARIABLE
					;

asignacion ::= 		VARIABLE ASIGNACION expresion PUNTO_COMA
					;

expresion ::= 		opAritmetica
					; 




